[
  {
    "objectID": "reglas_asociacion.html",
    "href": "reglas_asociacion.html",
    "title": "Reglas de asociación",
    "section": "",
    "text": "En este capítulo vamos a utilizar una técnica muy común en minería de datos que nos permitirá encontrar relaciones dentro del conjunto de datos que disponemos. Para ello, extraeremos un conjunto de reglas con el algoritmo apriori, proporcionado en la librería arules. Como en los capítulos anteriores ya hemos extraído cierta información, podemos presuponer que obtendremos reglas similares a la siguiente:\n{profile.pic==0, description.length==short} =&gt; {fake}\nSin embargo, puede haber ciertas relaciones que hayamos pasado por alto. Así que con la ayuda de arules, encontraremos todas las que sean relevantes.\n\n# Librerías\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(arules)\nlibrary(arulesViz)\nlibrary(RColorBrewer) # Para el color\n\n# Datos\ninsta_data &lt;- read.csv(\"train.csv\")\n\n\n\nAntes de poder trabajar con el conjunto de datos, deberemos transformar en factores sus atributos. Para ello, he estudiado los valores mínimos y máximos, así como la media, de cada atributo, de modo que pudiese obtener una división realista de cada grupo.\n\n# Elimino columnas\ninsta_data$nums.length.fullname &lt;- NULL\ninsta_data$nums.length.username &lt;- NULL\n\n# Convertimos en factor\ninsta_data$name..username &lt;- insta_data$name..username %&gt;% as.factor()\ninsta_data$profile.pic &lt;- insta_data$profile.pic %&gt;% as.factor()\ninsta_data$external.URL &lt;- insta_data$external.URL %&gt;% as.factor()\ninsta_data$private &lt;- insta_data$private %&gt;% as.factor()\ninsta_data$fake &lt;- insta_data$fake %&gt;% as.factor()\n\n# Categorizamos\ninsta_data$description.length &lt;- cut(insta_data$description.length, \n                      breaks = c(-1, 0, 22, 100, Inf), \n                      labels = c(\"None\", \"Short\", \"Medium\", \"Large\"))\ninsta_data$fullname.words &lt;- cut(insta_data$fullname.words, \n                      breaks = c(-1, 0, 4, 8, Inf), \n                      labels = c(\"None\", \"Short\", \"Medium\", \"Long\"))\ninsta_data$X.posts &lt;- cut(insta_data$X.posts, \n                      breaks = c(-1, 0, 50, 200, Inf), \n                      labels = c(\"None\", \"Few\", \"Regular\", \"Lots\"))\n\n\ninsta_data$X.followers &lt;- discretize(insta_data$X.followers, method = \"frequency\", breaks = 3, labels=c(\"Few\", \"Regular\", \"Lots\"))\ninsta_data$X.follows &lt;- discretize(insta_data$X.follows, method = \"frequency\", breaks = 3, labels=c(\"Few\", \"Regular\", \"Lots\"))\n\nUna vez tenemos los datos preparados, veamos qué frecuencia absoluta tienen sus items.\n\nitemFrequencyPlot(as(insta_data, \"transactions\"), type = \"absolute\", col = brewer.pal(8, 'Pastel2'))\n\n\n\n\n\n\n\n\nrules &lt;- apriori(insta_data, parameter = list(support=0.1, conf=0.9))\n\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n        0.9    0.1    1 none FALSE            TRUE       5     0.1      1\n maxlen target  ext\n     10  rules TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 57 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[28 item(s), 576 transaction(s)] done [0.00s].\nsorting and recoding items ... [23 item(s)] done [0.00s].\ncreating transaction tree ... done [0.00s].\nchecking subsets of size 1 2 3 4 5 6 7 8 9 done [0.00s].\nwriting ... [3982 rule(s)] done [0.00s].\ncreating S4 object  ... done [0.00s].\n\n\n\nprint(paste(\"Porcentaje de reglas redundantes: \", mean(is.redundant(rules)*100)))\n\n[1] \"Porcentaje de reglas redundantes:  92.9683576092416\"\n\nprint(paste(\"Porcentaje de reglas significativas: \", mean(is.significant(rules, transactions.obj, method = \"fisher\")*100)))\n\n[1] \"Porcentaje de reglas significativas:  58.4630838774485\"\n\n\n\n# Elimino reglas redundantes\nrules &lt;- rules[!is.redundant(rules)]\n# Elimino reglas poco significativas\nrules &lt;- rules[is.significant(rules, transactions.obj, method = \"fisher\")]\n# Ordeno por lift\nrules &lt;- sort(rules, by = \"lift\")\n\nUna vez creado el conjunto de reglas, podemos ver la información más relevante de ellas con el método summary.\nEsta función nos dice que tenemos 197 reglas, con una media de soporte del 21% y un 96% de confianza.\n\nsummary(rules)\n\nset of 197 rules\n\nrule length distribution (lhs + rhs):sizes\n 2  3  4  5  6  7  8 \n27 79 51 25 11  3  1 \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.000   3.000   3.000   3.629   4.000   8.000 \n\nsummary of quality measures:\n    support         confidence        coverage           lift      \n Min.   :0.1007   Min.   :0.9000   Min.   :0.1076   Min.   :1.015  \n 1st Qu.:0.1337   1st Qu.:0.9349   1st Qu.:0.1389   1st Qu.:1.285  \n Median :0.1892   Median :0.9625   Median :0.1997   Median :1.688  \n Mean   :0.2111   Mean   :0.9606   Mean   :0.2192   Mean   :1.743  \n 3rd Qu.:0.2726   3rd Qu.:0.9899   3rd Qu.:0.2778   3rd Qu.:1.960  \n Max.   :0.6875   Max.   :1.0000   Max.   :0.7014   Max.   :3.241  \n     count      \n Min.   : 58.0  \n 1st Qu.: 77.0  \n Median :109.0  \n Mean   :121.6  \n 3rd Qu.:157.0  \n Max.   :396.0  \n\nmining info:\n       data ntransactions support confidence\n insta_data           576     0.1        0.9\n                                                                    call\n apriori(data = insta_data, parameter = list(support = 0.1, conf = 0.9))\n\n\n\n# Observamos las cinco primeras reglas con mayor lift\ninspect(rules[1:5])\n\n    lhs                           rhs               support confidence  coverage     lift count\n[1] {fullname.words=Short,                                                                     \n     description.length=None,                                                                  \n     private=0,                                                                                \n     X.posts=None,                                                                             \n     X.followers=Few,                                                                          \n     X.follows=Few}            =&gt; {profile.pic=0} 0.1041667  0.9677419 0.1076389 3.240810    60\n[2] {description.length=None,                                                                  \n     private=0,                                                                                \n     X.posts=None,                                                                             \n     X.followers=Few,                                                                          \n     X.follows=Few}            =&gt; {profile.pic=0} 0.1076389  0.9538462 0.1128472 3.194275    62\n[3] {fullname.words=Short,                                                                     \n     description.length=None,                                                                  \n     private=0,                                                                                \n     X.posts=None,                                                                             \n     X.follows=Few,                                                                            \n     fake=1}                   =&gt; {profile.pic=0} 0.1180556  0.9444444 0.1250000 3.162791    68\n[4] {fullname.words=Short,                                                                     \n     description.length=None,                                                                  \n     private=0,                                                                                \n     X.posts=None,                                                                             \n     X.followers=Few}          =&gt; {profile.pic=0} 0.1128472  0.9420290 0.1197917 3.154702    65\n[5] {fullname.words=Short,                                                                     \n     description.length=None,                                                                  \n     private=0,                                                                                \n     X.followers=Few,                                                                          \n     X.follows=Few,                                                                            \n     fake=1}                   =&gt; {profile.pic=0} 0.1319444  0.9382716 0.1406250 3.142119    76\n\n\n\n# Visualizamos las reglas\nplot(rules)\n\n\n\n\n\n\n\n\n\nVamos a ver aquellas reglas del tipo “Si una cuenta tiene muchos seguidores, entonces…”\n\nrules_pop &lt;- subset(rules, subset = lhs %in% \"X.followers=Lots\")\nsummary(rules_pop)\n\nset of 24 rules\n\nrule length distribution (lhs + rhs):sizes\n 2  3  4 \n 3 13  8 \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.000   3.000   3.000   3.208   4.000   4.000 \n\nsummary of quality measures:\n    support         confidence        coverage           lift      \n Min.   :0.1076   Min.   :0.9375   Min.   :0.1076   Min.   :1.031  \n 1st Qu.:0.1532   1st Qu.:0.9676   1st Qu.:0.1545   1st Qu.:1.404  \n Median :0.2726   Median :0.9870   Median :0.2847   Median :1.650  \n Mean   :0.2418   Mean   :0.9807   Mean   :0.2473   Mean   :1.628  \n 3rd Qu.:0.3125   3rd Qu.:1.0000   3rd Qu.:0.3247   3rd Qu.:1.929  \n Max.   :0.3316   Max.   :1.0000   Max.   :0.3333   Max.   :2.000  \n     count       \n Min.   : 62.00  \n 1st Qu.: 88.25  \n Median :157.00  \n Mean   :139.25  \n 3rd Qu.:180.00  \n Max.   :191.00  \n\nmining info:\n       data ntransactions support confidence\n insta_data           576     0.1        0.9\n                                                                    call\n apriori(data = insta_data, parameter = list(support = 0.1, conf = 0.9))\n\n\n\n# Ordeno por soporte\nrules_pop &lt;- sort(rules_pop, by=\"support\")\n\n# Visualizo las primeras\ninspect(head(rules_pop))\n\n    lhs                                     rhs                support  \n[1] {X.followers=Lots}                   =&gt; {name..username=0} 0.3315972\n[2] {name..username=0, X.followers=Lots} =&gt; {profile.pic=1}    0.3246528\n[3] {X.followers=Lots}                   =&gt; {profile.pic=1}    0.3246528\n[4] {profile.pic=1, X.followers=Lots}    =&gt; {name..username=0} 0.3246528\n[5] {name..username=0, X.followers=Lots} =&gt; {fake=0}           0.3125000\n[6] {X.followers=Lots}                   =&gt; {fake=0}           0.3125000\n    confidence coverage  lift     count\n[1] 0.9947917  0.3333333 1.030576 191  \n[2] 0.9790576  0.3315972 1.395884 187  \n[3] 0.9739583  0.3333333 1.388614 187  \n[4] 1.0000000  0.3246528 1.035971 187  \n[5] 0.9424084  0.3315972 1.884817 180  \n[6] 0.9375000  0.3333333 1.875000 180  \n\n\nTambién podemos observar aquellas reglas que solo tienen este atributo en la parte derecha, es decir, “Si una cuenta es …, entonces tiene muchos seguidores”.\n\nrules_pop2 &lt;- subset(rules, subset = rhs %oin% \"X.followers=Lots\")\ninspect(rules_pop2)\n\n    lhs                        rhs                  support confidence  coverage     lift count\n[1] {X.posts=Lots,                                                                             \n     fake=0}                =&gt; {X.followers=Lots} 0.1250000  0.9350649 0.1336806 2.805195    72\n[2] {fullname.words=Short,                                                                     \n     private=0,                                                                                \n     X.follows=Lots,                                                                           \n     fake=0}                =&gt; {X.followers=Lots} 0.1388889  0.9302326 0.1493056 2.790698    80\n[3] {fullname.words=Short,                                                                     \n     X.posts=Lots}          =&gt; {X.followers=Lots} 0.1145833  0.9295775 0.1232639 2.788732    66\n[4] {private=0,                                                                                \n     X.follows=Lots,                                                                           \n     fake=0}                =&gt; {X.followers=Lots} 0.1545139  0.9270833 0.1666667 2.781250    89\n[5] {X.posts=Lots}          =&gt; {X.followers=Lots} 0.1250000  0.9230769 0.1354167 2.769231    72\n\n\nUna conclusión interesante que obtenemos de estas reglas, es que las cuentas con muchos seguidores tienden a ser reales, además de que normalmente no son privadas y suelen hacer publicaciones con regularidad.\n\n\n\n\nrules_priv &lt;- subset(rules, subset = (lhs %ain% \"private=0\"))\ninspect(head(sort(rules_priv, by=\"support\")))\n\n    lhs                           rhs                      support confidence  coverage     lift count\n[1] {profile.pic=1,                                                                                   \n     private=0}                =&gt; {name..username=0}     0.4062500  0.9957447 0.4079861 1.031563   234\n[2] {description.length=None,                                                                         \n     private=0}                =&gt; {external.URL=0}       0.3437500  0.9801980 0.3506944 1.109222   198\n[3] {description.length=None,                                                                         \n     private=0}                =&gt; {fullname.words=Short} 0.3263889  0.9306931 0.3506944 1.049079   188\n[4] {fullname.words=Short,                                                                            \n     description.length=None,                                                                         \n     private=0}                =&gt; {external.URL=0}       0.3211806  0.9840426 0.3263889 1.113573   185\n[5] {description.length=None,                                                                         \n     external.URL=0,                                                                                  \n     private=0}                =&gt; {fullname.words=Short} 0.3211806  0.9343434 0.3437500 1.053193   185\n[6] {private=0,                                                                                       \n     fake=0}                   =&gt; {profile.pic=1}        0.3020833  1.0000000 0.3020833 1.425743   174\n\n\n\n\n\nPrimero voy a crear un subconjunto tan solo con las cuentas falsas.\n\nrules_fake &lt;- subset(rules, subset = (lhs %ain% \"fake=1\" | rhs %ain% \"fake=1\"))\ninspect(head(sort(rules_fake, by=\"support\")))\n\n    lhs                                           rhs                   \n[1] {fake=1}                                   =&gt; {external.URL=0}      \n[2] {X.followers=Few}                          =&gt; {fake=1}              \n[3] {private=0, fake=1}                        =&gt; {fullname.words=Short}\n[4] {profile.pic=0}                            =&gt; {fake=1}              \n[5] {description.length=None, X.followers=Few} =&gt; {fake=1}              \n[6] {profile.pic=0, description.length=None}   =&gt; {fake=1}              \n    support   confidence coverage  lift     count\n[1] 0.5000000 1.0000000  0.5000000 1.131631 288  \n[2] 0.3229167 0.9687500  0.3333333 1.937500 186  \n[3] 0.2986111 0.9450549  0.3159722 1.065267 172  \n[4] 0.2951389 0.9883721  0.2986111 1.976744 170  \n[5] 0.2864583 0.9763314  0.2934028 1.952663 165  \n[6] 0.2829861 1.0000000  0.2829861 2.000000 163  \n\n\nPosteriormente, voy a buscar algunos atributos para ver qué valores tienden a tener dentro de este grupo.\n\n# Reglas que indican que hay cuentas falsas con pocos seguidores\nsubset(rules_fake, subset = items %in% \"X.followers=Few\")\n\nset of 15 rules \n\n# Reglas que indican que hay cuentas falsas con muchos seguidores\nsubset(rules_fake, subset = items %in% c(\"X.followers=Regular\", \"X.followers=Lots\"))\n\nset of 0 rules \n\n\nTambién observamos que hay bastantes reglas para las cuentas falsas sin descripción.\n\ninspect(subset(rules_fake, subset = items %in% \"description.length=None\")[1:5])\n\n    lhs                           rhs               support confidence  coverage     lift count\n[1] {fullname.words=Short,                                                                     \n     description.length=None,                                                                  \n     private=0,                                                                                \n     X.posts=None,                                                                             \n     X.follows=Few,                                                                            \n     fake=1}                   =&gt; {profile.pic=0} 0.1180556  0.9444444 0.1250000 3.162791    68\n[2] {fullname.words=Short,                                                                     \n     description.length=None,                                                                  \n     private=0,                                                                                \n     X.followers=Few,                                                                          \n     X.follows=Few,                                                                            \n     fake=1}                   =&gt; {profile.pic=0} 0.1319444  0.9382716 0.1406250 3.142119    76\n[3] {description.length=None,                                                                  \n     private=0,                                                                                \n     X.posts=None,                                                                             \n     X.follows=Few,                                                                            \n     fake=1}                   =&gt; {profile.pic=0} 0.1215278  0.9333333 0.1302083 3.125581    70\n[4] {description.length=None,                                                                  \n     private=0,                                                                                \n     X.followers=Few,                                                                          \n     X.follows=Few,                                                                            \n     fake=1}                   =&gt; {profile.pic=0} 0.1371528  0.9294118 0.1475694 3.112449    79\n[5] {fullname.words=Short,                                                                     \n     description.length=None,                                                                  \n     private=0,                                                                                \n     X.posts=None,                                                                             \n     fake=1}                   =&gt; {profile.pic=0} 0.1475694  0.9139785 0.1614583 3.060765    85\n\n\nComo vimos en el análisis exploratorio de datos, si una cuenta no tiene URL externa, entonces es falsa.\n\ninspect(subset(rules_fake, subset = items %in% \"external.URL=0\"))\n\n    lhs                        rhs                support confidence coverage     lift count\n[1] {fullname.words=Short,                                                                  \n     external.URL=0,                                                                        \n     private=0,                                                                             \n     X.follows=Few}         =&gt; {fake=1}         0.1840278  0.9059829 0.203125 1.811966   106\n[2] {fake=1}                =&gt; {external.URL=0} 0.5000000  1.0000000 0.500000 1.131631   288\n\n\n\n\n\n\nrules_real &lt;- subset(rules, subset = (lhs %ain% \"fake=0\" | rhs %ain% \"fake=0\"))\ninspect(head(sort(rules_real, by=\"support\")))\n\n    lhs                                     rhs                support  \n[1] {fake=0}                             =&gt; {name..username=0} 0.4982639\n[2] {fake=0}                             =&gt; {profile.pic=1}    0.4965278\n[3] {fullname.words=Short, fake=0}       =&gt; {profile.pic=1}    0.4340278\n[4] {external.URL=0, fake=0}             =&gt; {name..username=0} 0.3836806\n[5] {name..username=0, X.followers=Lots} =&gt; {fake=0}           0.3125000\n[6] {X.followers=Lots}                   =&gt; {fake=0}           0.3125000\n    confidence coverage  lift     count\n[1] 0.9965278  0.5000000 1.032374 287  \n[2] 0.9930556  0.5000000 1.415842 286  \n[3] 0.9960159  0.4357639 1.420062 250  \n[4] 1.0000000  0.3836806 1.035971 221  \n[5] 0.9424084  0.3315972 1.884817 180  \n[6] 0.9375000  0.3333333 1.875000 180  \n\n\n\ninspect(subset(rules_real, subset = items %in% \"external.URL=1\"))\n\n    lhs                 rhs      support   confidence coverage  lift count\n[1] {external.URL=1} =&gt; {fake=0} 0.1163194 1          0.1163194 2    67   \n\n\n\ninspect(subset(rules_real, subset = items %in% c(\"X.followers=Regular\", \"X.followers=Lots\")))\n\n     lhs                             rhs                  support confidence  coverage     lift count\n[1]  {X.posts=Lots,                                                                                  \n      fake=0}                     =&gt; {X.followers=Lots} 0.1250000  0.9350649 0.1336806 2.805195    72\n[2]  {fullname.words=Short,                                                                          \n      private=0,                                                                                     \n      X.follows=Lots,                                                                                \n      fake=0}                     =&gt; {X.followers=Lots} 0.1388889  0.9302326 0.1493056 2.790698    80\n[3]  {private=0,                                                                                     \n      X.follows=Lots,                                                                                \n      fake=0}                     =&gt; {X.followers=Lots} 0.1545139  0.9270833 0.1666667 2.781250    89\n[4]  {X.posts=Lots,                                                                                  \n      X.followers=Lots}           =&gt; {fake=0}           0.1250000  1.0000000 0.1250000 2.000000    72\n[5]  {description.length=Medium,                                                                     \n      private=0,                                                                                     \n      X.followers=Lots}           =&gt; {fake=0}           0.1232639  1.0000000 0.1232639 2.000000    71\n[6]  {fullname.words=Short,                                                                          \n      description.length=Medium,                                                                     \n      X.followers=Lots}           =&gt; {fake=0}           0.1440972  1.0000000 0.1440972 2.000000    83\n[7]  {description.length=Medium,                                                                     \n      X.followers=Lots}           =&gt; {fake=0}           0.1562500  0.9890110 0.1579861 1.978022    90\n[8]  {X.posts=Regular,                                                                               \n      X.followers=Lots}           =&gt; {fake=0}           0.1215278  0.9722222 0.1250000 1.944444    70\n[9]  {profile.pic=1,                                                                                 \n      fullname.words=Short,                                                                          \n      X.followers=Lots}           =&gt; {fake=0}           0.2725694  0.9691358 0.2812500 1.938272   157\n[10] {profile.pic=1,                                                                                 \n      private=0,                                                                                     \n      X.followers=Lots}           =&gt; {fake=0}           0.2256944  0.9629630 0.2343750 1.925926   130\n[11] {fullname.words=Short,                                                                          \n      name..username=0,                                                                              \n      X.followers=Lots}           =&gt; {fake=0}           0.2725694  0.9573171 0.2847222 1.914634   157\n[12] {profile.pic=1,                                                                                 \n      X.followers=Lots}           =&gt; {fake=0}           0.3107639  0.9572193 0.3246528 1.914439   179\n[13] {fullname.words=Short,                                                                          \n      X.followers=Lots}           =&gt; {fake=0}           0.2725694  0.9515152 0.2864583 1.903030   157\n[14] {name..username=0,                                                                              \n      X.followers=Lots}           =&gt; {fake=0}           0.3125000  0.9424084 0.3315972 1.884817   180\n[15] {X.followers=Lots}           =&gt; {fake=0}           0.3125000  0.9375000 0.3333333 1.875000   180\n[16] {fullname.words=Short,                                                                          \n      X.followers=Lots,                                                                              \n      fake=0}                     =&gt; {profile.pic=1}    0.2725694  1.0000000 0.2725694 1.425743   157\n[17] {X.followers=Lots,                                                                              \n      fake=0}                     =&gt; {profile.pic=1}    0.3107639  0.9944444 0.3125000 1.417822   179\n[18] {X.followers=Lots,                                                                              \n      fake=0}                     =&gt; {name..username=0} 0.3125000  1.0000000 0.3125000 1.035971   180\n\n\nAdemás de las reglas que son opuestas a las obtenidas para las cuentas falsas, observamos que es usual para las cuentas reales que tengan alguna descripción, foto de perfil y algunos posts.\n\n\n\n\nOtra opción interesante que nos da arules es encontrar un conjunto de items, en lugar de reglas. Probemos a obtener itemsets con al menos dos items y un 1% de soporte.\n\nitemsets &lt;- apriori(data = insta_data, parameter = list(support = 0.01, minlen = 2, target = \"frequent itemset\"))\n\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n         NA    0.1    1 none FALSE            TRUE       5    0.01      2\n maxlen            target  ext\n     10 frequent itemsets TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 5 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[28 item(s), 576 transaction(s)] done [0.00s].\nsorting and recoding items ... [27 item(s)] done [0.00s].\ncreating transaction tree ... done [0.00s].\nchecking subsets of size 1 2 3 4 5 6 7 8 9 10 done [0.01s].\nsorting transactions ... done [0.00s].\nwriting ... [19655 set(s)] done [0.00s].\ncreating S4 object  ... done [0.00s].\n\nitemsets &lt;- sort(itemsets, by=\"support\")\n\nObservamos los primeros items.\n\ninspect(itemsets[1:10])\n\n     items                     support count\n[1]  {fullname.words=Short,                 \n      name..username=0}      0.8524306   491\n[2]  {name..username=0,                     \n      external.URL=0}        0.8506944   490\n[3]  {fullname.words=Short,                 \n      external.URL=0}        0.7829861   451\n[4]  {fullname.words=Short,                 \n      name..username=0,                     \n      external.URL=0}        0.7500000   432\n[5]  {profile.pic=1,                        \n      name..username=0}      0.6875000   396\n[6]  {profile.pic=1,                        \n      fullname.words=Short}  0.6093750   351\n[7]  {name..username=0,                     \n      private=0}             0.6006944   346\n[8]  {profile.pic=1,                        \n      fullname.words=Short,                 \n      name..username=0}      0.5954861   343\n[9]  {profile.pic=1,                        \n      external.URL=0}        0.5850694   337\n[10] {profile.pic=1,                        \n      name..username=0,                     \n      external.URL=0}        0.5729167   330\n\n\nY visualizamos los más frecuentes.\n\nas(itemsets[1:10], Class = \"data.frame\") %&gt;%\n  ggplot(aes(x = items, y = support)) +\n  geom_col(fill = \"brown3\") +\n  coord_flip()"
  },
  {
    "objectID": "reglas_asociacion.html#preprocesamiento",
    "href": "reglas_asociacion.html#preprocesamiento",
    "title": "Reglas de asociación",
    "section": "",
    "text": "Antes de poder trabajar con el conjunto de datos, deberemos transformar en factores sus atributos. Para ello, he estudiado los valores mínimos y máximos, así como la media, de cada atributo, de modo que pudiese obtener una división realista de cada grupo.\n\n# Elimino columnas\ninsta_data$nums.length.fullname &lt;- NULL\ninsta_data$nums.length.username &lt;- NULL\n\n# Convertimos en factor\ninsta_data$name..username &lt;- insta_data$name..username %&gt;% as.factor()\ninsta_data$profile.pic &lt;- insta_data$profile.pic %&gt;% as.factor()\ninsta_data$external.URL &lt;- insta_data$external.URL %&gt;% as.factor()\ninsta_data$private &lt;- insta_data$private %&gt;% as.factor()\ninsta_data$fake &lt;- insta_data$fake %&gt;% as.factor()\n\n# Categorizamos\ninsta_data$description.length &lt;- cut(insta_data$description.length, \n                      breaks = c(-1, 0, 22, 100, Inf), \n                      labels = c(\"None\", \"Short\", \"Medium\", \"Large\"))\ninsta_data$fullname.words &lt;- cut(insta_data$fullname.words, \n                      breaks = c(-1, 0, 4, 8, Inf), \n                      labels = c(\"None\", \"Short\", \"Medium\", \"Long\"))\ninsta_data$X.posts &lt;- cut(insta_data$X.posts, \n                      breaks = c(-1, 0, 50, 200, Inf), \n                      labels = c(\"None\", \"Few\", \"Regular\", \"Lots\"))\n\n\ninsta_data$X.followers &lt;- discretize(insta_data$X.followers, method = \"frequency\", breaks = 3, labels=c(\"Few\", \"Regular\", \"Lots\"))\ninsta_data$X.follows &lt;- discretize(insta_data$X.follows, method = \"frequency\", breaks = 3, labels=c(\"Few\", \"Regular\", \"Lots\"))\n\nUna vez tenemos los datos preparados, veamos qué frecuencia absoluta tienen sus items.\n\nitemFrequencyPlot(as(insta_data, \"transactions\"), type = \"absolute\", col = brewer.pal(8, 'Pastel2'))"
  },
  {
    "objectID": "reglas_asociacion.html#aplicando-algoritmo-apriori",
    "href": "reglas_asociacion.html#aplicando-algoritmo-apriori",
    "title": "Reglas de asociación",
    "section": "",
    "text": "rules &lt;- apriori(insta_data, parameter = list(support=0.1, conf=0.9))\n\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n        0.9    0.1    1 none FALSE            TRUE       5     0.1      1\n maxlen target  ext\n     10  rules TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 57 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[28 item(s), 576 transaction(s)] done [0.00s].\nsorting and recoding items ... [23 item(s)] done [0.00s].\ncreating transaction tree ... done [0.00s].\nchecking subsets of size 1 2 3 4 5 6 7 8 9 done [0.00s].\nwriting ... [3982 rule(s)] done [0.00s].\ncreating S4 object  ... done [0.00s].\n\n\n\nprint(paste(\"Porcentaje de reglas redundantes: \", mean(is.redundant(rules)*100)))\n\n[1] \"Porcentaje de reglas redundantes:  92.9683576092416\"\n\nprint(paste(\"Porcentaje de reglas significativas: \", mean(is.significant(rules, transactions.obj, method = \"fisher\")*100)))\n\n[1] \"Porcentaje de reglas significativas:  58.4630838774485\"\n\n\n\n# Elimino reglas redundantes\nrules &lt;- rules[!is.redundant(rules)]\n# Elimino reglas poco significativas\nrules &lt;- rules[is.significant(rules, transactions.obj, method = \"fisher\")]\n# Ordeno por lift\nrules &lt;- sort(rules, by = \"lift\")\n\nUna vez creado el conjunto de reglas, podemos ver la información más relevante de ellas con el método summary.\nEsta función nos dice que tenemos 197 reglas, con una media de soporte del 21% y un 96% de confianza.\n\nsummary(rules)\n\nset of 197 rules\n\nrule length distribution (lhs + rhs):sizes\n 2  3  4  5  6  7  8 \n27 79 51 25 11  3  1 \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.000   3.000   3.000   3.629   4.000   8.000 \n\nsummary of quality measures:\n    support         confidence        coverage           lift      \n Min.   :0.1007   Min.   :0.9000   Min.   :0.1076   Min.   :1.015  \n 1st Qu.:0.1337   1st Qu.:0.9349   1st Qu.:0.1389   1st Qu.:1.285  \n Median :0.1892   Median :0.9625   Median :0.1997   Median :1.688  \n Mean   :0.2111   Mean   :0.9606   Mean   :0.2192   Mean   :1.743  \n 3rd Qu.:0.2726   3rd Qu.:0.9899   3rd Qu.:0.2778   3rd Qu.:1.960  \n Max.   :0.6875   Max.   :1.0000   Max.   :0.7014   Max.   :3.241  \n     count      \n Min.   : 58.0  \n 1st Qu.: 77.0  \n Median :109.0  \n Mean   :121.6  \n 3rd Qu.:157.0  \n Max.   :396.0  \n\nmining info:\n       data ntransactions support confidence\n insta_data           576     0.1        0.9\n                                                                    call\n apriori(data = insta_data, parameter = list(support = 0.1, conf = 0.9))\n\n\n\n# Observamos las cinco primeras reglas con mayor lift\ninspect(rules[1:5])\n\n    lhs                           rhs               support confidence  coverage     lift count\n[1] {fullname.words=Short,                                                                     \n     description.length=None,                                                                  \n     private=0,                                                                                \n     X.posts=None,                                                                             \n     X.followers=Few,                                                                          \n     X.follows=Few}            =&gt; {profile.pic=0} 0.1041667  0.9677419 0.1076389 3.240810    60\n[2] {description.length=None,                                                                  \n     private=0,                                                                                \n     X.posts=None,                                                                             \n     X.followers=Few,                                                                          \n     X.follows=Few}            =&gt; {profile.pic=0} 0.1076389  0.9538462 0.1128472 3.194275    62\n[3] {fullname.words=Short,                                                                     \n     description.length=None,                                                                  \n     private=0,                                                                                \n     X.posts=None,                                                                             \n     X.follows=Few,                                                                            \n     fake=1}                   =&gt; {profile.pic=0} 0.1180556  0.9444444 0.1250000 3.162791    68\n[4] {fullname.words=Short,                                                                     \n     description.length=None,                                                                  \n     private=0,                                                                                \n     X.posts=None,                                                                             \n     X.followers=Few}          =&gt; {profile.pic=0} 0.1128472  0.9420290 0.1197917 3.154702    65\n[5] {fullname.words=Short,                                                                     \n     description.length=None,                                                                  \n     private=0,                                                                                \n     X.followers=Few,                                                                          \n     X.follows=Few,                                                                            \n     fake=1}                   =&gt; {profile.pic=0} 0.1319444  0.9382716 0.1406250 3.142119    76\n\n\n\n# Visualizamos las reglas\nplot(rules)"
  },
  {
    "objectID": "reglas_asociacion.html#filtrando-reglas",
    "href": "reglas_asociacion.html#filtrando-reglas",
    "title": "Reglas de asociación",
    "section": "",
    "text": "Vamos a ver aquellas reglas del tipo “Si una cuenta tiene muchos seguidores, entonces…”\n\nrules_pop &lt;- subset(rules, subset = lhs %in% \"X.followers=Lots\")\nsummary(rules_pop)\n\nset of 24 rules\n\nrule length distribution (lhs + rhs):sizes\n 2  3  4 \n 3 13  8 \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.000   3.000   3.000   3.208   4.000   4.000 \n\nsummary of quality measures:\n    support         confidence        coverage           lift      \n Min.   :0.1076   Min.   :0.9375   Min.   :0.1076   Min.   :1.031  \n 1st Qu.:0.1532   1st Qu.:0.9676   1st Qu.:0.1545   1st Qu.:1.404  \n Median :0.2726   Median :0.9870   Median :0.2847   Median :1.650  \n Mean   :0.2418   Mean   :0.9807   Mean   :0.2473   Mean   :1.628  \n 3rd Qu.:0.3125   3rd Qu.:1.0000   3rd Qu.:0.3247   3rd Qu.:1.929  \n Max.   :0.3316   Max.   :1.0000   Max.   :0.3333   Max.   :2.000  \n     count       \n Min.   : 62.00  \n 1st Qu.: 88.25  \n Median :157.00  \n Mean   :139.25  \n 3rd Qu.:180.00  \n Max.   :191.00  \n\nmining info:\n       data ntransactions support confidence\n insta_data           576     0.1        0.9\n                                                                    call\n apriori(data = insta_data, parameter = list(support = 0.1, conf = 0.9))\n\n\n\n# Ordeno por soporte\nrules_pop &lt;- sort(rules_pop, by=\"support\")\n\n# Visualizo las primeras\ninspect(head(rules_pop))\n\n    lhs                                     rhs                support  \n[1] {X.followers=Lots}                   =&gt; {name..username=0} 0.3315972\n[2] {name..username=0, X.followers=Lots} =&gt; {profile.pic=1}    0.3246528\n[3] {X.followers=Lots}                   =&gt; {profile.pic=1}    0.3246528\n[4] {profile.pic=1, X.followers=Lots}    =&gt; {name..username=0} 0.3246528\n[5] {name..username=0, X.followers=Lots} =&gt; {fake=0}           0.3125000\n[6] {X.followers=Lots}                   =&gt; {fake=0}           0.3125000\n    confidence coverage  lift     count\n[1] 0.9947917  0.3333333 1.030576 191  \n[2] 0.9790576  0.3315972 1.395884 187  \n[3] 0.9739583  0.3333333 1.388614 187  \n[4] 1.0000000  0.3246528 1.035971 187  \n[5] 0.9424084  0.3315972 1.884817 180  \n[6] 0.9375000  0.3333333 1.875000 180  \n\n\nTambién podemos observar aquellas reglas que solo tienen este atributo en la parte derecha, es decir, “Si una cuenta es …, entonces tiene muchos seguidores”.\n\nrules_pop2 &lt;- subset(rules, subset = rhs %oin% \"X.followers=Lots\")\ninspect(rules_pop2)\n\n    lhs                        rhs                  support confidence  coverage     lift count\n[1] {X.posts=Lots,                                                                             \n     fake=0}                =&gt; {X.followers=Lots} 0.1250000  0.9350649 0.1336806 2.805195    72\n[2] {fullname.words=Short,                                                                     \n     private=0,                                                                                \n     X.follows=Lots,                                                                           \n     fake=0}                =&gt; {X.followers=Lots} 0.1388889  0.9302326 0.1493056 2.790698    80\n[3] {fullname.words=Short,                                                                     \n     X.posts=Lots}          =&gt; {X.followers=Lots} 0.1145833  0.9295775 0.1232639 2.788732    66\n[4] {private=0,                                                                                \n     X.follows=Lots,                                                                           \n     fake=0}                =&gt; {X.followers=Lots} 0.1545139  0.9270833 0.1666667 2.781250    89\n[5] {X.posts=Lots}          =&gt; {X.followers=Lots} 0.1250000  0.9230769 0.1354167 2.769231    72\n\n\nUna conclusión interesante que obtenemos de estas reglas, es que las cuentas con muchos seguidores tienden a ser reales, además de que normalmente no son privadas y suelen hacer publicaciones con regularidad.\n\n\n\n\nrules_priv &lt;- subset(rules, subset = (lhs %ain% \"private=0\"))\ninspect(head(sort(rules_priv, by=\"support\")))\n\n    lhs                           rhs                      support confidence  coverage     lift count\n[1] {profile.pic=1,                                                                                   \n     private=0}                =&gt; {name..username=0}     0.4062500  0.9957447 0.4079861 1.031563   234\n[2] {description.length=None,                                                                         \n     private=0}                =&gt; {external.URL=0}       0.3437500  0.9801980 0.3506944 1.109222   198\n[3] {description.length=None,                                                                         \n     private=0}                =&gt; {fullname.words=Short} 0.3263889  0.9306931 0.3506944 1.049079   188\n[4] {fullname.words=Short,                                                                            \n     description.length=None,                                                                         \n     private=0}                =&gt; {external.URL=0}       0.3211806  0.9840426 0.3263889 1.113573   185\n[5] {description.length=None,                                                                         \n     external.URL=0,                                                                                  \n     private=0}                =&gt; {fullname.words=Short} 0.3211806  0.9343434 0.3437500 1.053193   185\n[6] {private=0,                                                                                       \n     fake=0}                   =&gt; {profile.pic=1}        0.3020833  1.0000000 0.3020833 1.425743   174\n\n\n\n\n\nPrimero voy a crear un subconjunto tan solo con las cuentas falsas.\n\nrules_fake &lt;- subset(rules, subset = (lhs %ain% \"fake=1\" | rhs %ain% \"fake=1\"))\ninspect(head(sort(rules_fake, by=\"support\")))\n\n    lhs                                           rhs                   \n[1] {fake=1}                                   =&gt; {external.URL=0}      \n[2] {X.followers=Few}                          =&gt; {fake=1}              \n[3] {private=0, fake=1}                        =&gt; {fullname.words=Short}\n[4] {profile.pic=0}                            =&gt; {fake=1}              \n[5] {description.length=None, X.followers=Few} =&gt; {fake=1}              \n[6] {profile.pic=0, description.length=None}   =&gt; {fake=1}              \n    support   confidence coverage  lift     count\n[1] 0.5000000 1.0000000  0.5000000 1.131631 288  \n[2] 0.3229167 0.9687500  0.3333333 1.937500 186  \n[3] 0.2986111 0.9450549  0.3159722 1.065267 172  \n[4] 0.2951389 0.9883721  0.2986111 1.976744 170  \n[5] 0.2864583 0.9763314  0.2934028 1.952663 165  \n[6] 0.2829861 1.0000000  0.2829861 2.000000 163  \n\n\nPosteriormente, voy a buscar algunos atributos para ver qué valores tienden a tener dentro de este grupo.\n\n# Reglas que indican que hay cuentas falsas con pocos seguidores\nsubset(rules_fake, subset = items %in% \"X.followers=Few\")\n\nset of 15 rules \n\n# Reglas que indican que hay cuentas falsas con muchos seguidores\nsubset(rules_fake, subset = items %in% c(\"X.followers=Regular\", \"X.followers=Lots\"))\n\nset of 0 rules \n\n\nTambién observamos que hay bastantes reglas para las cuentas falsas sin descripción.\n\ninspect(subset(rules_fake, subset = items %in% \"description.length=None\")[1:5])\n\n    lhs                           rhs               support confidence  coverage     lift count\n[1] {fullname.words=Short,                                                                     \n     description.length=None,                                                                  \n     private=0,                                                                                \n     X.posts=None,                                                                             \n     X.follows=Few,                                                                            \n     fake=1}                   =&gt; {profile.pic=0} 0.1180556  0.9444444 0.1250000 3.162791    68\n[2] {fullname.words=Short,                                                                     \n     description.length=None,                                                                  \n     private=0,                                                                                \n     X.followers=Few,                                                                          \n     X.follows=Few,                                                                            \n     fake=1}                   =&gt; {profile.pic=0} 0.1319444  0.9382716 0.1406250 3.142119    76\n[3] {description.length=None,                                                                  \n     private=0,                                                                                \n     X.posts=None,                                                                             \n     X.follows=Few,                                                                            \n     fake=1}                   =&gt; {profile.pic=0} 0.1215278  0.9333333 0.1302083 3.125581    70\n[4] {description.length=None,                                                                  \n     private=0,                                                                                \n     X.followers=Few,                                                                          \n     X.follows=Few,                                                                            \n     fake=1}                   =&gt; {profile.pic=0} 0.1371528  0.9294118 0.1475694 3.112449    79\n[5] {fullname.words=Short,                                                                     \n     description.length=None,                                                                  \n     private=0,                                                                                \n     X.posts=None,                                                                             \n     fake=1}                   =&gt; {profile.pic=0} 0.1475694  0.9139785 0.1614583 3.060765    85\n\n\nComo vimos en el análisis exploratorio de datos, si una cuenta no tiene URL externa, entonces es falsa.\n\ninspect(subset(rules_fake, subset = items %in% \"external.URL=0\"))\n\n    lhs                        rhs                support confidence coverage     lift count\n[1] {fullname.words=Short,                                                                  \n     external.URL=0,                                                                        \n     private=0,                                                                             \n     X.follows=Few}         =&gt; {fake=1}         0.1840278  0.9059829 0.203125 1.811966   106\n[2] {fake=1}                =&gt; {external.URL=0} 0.5000000  1.0000000 0.500000 1.131631   288\n\n\n\n\n\n\nrules_real &lt;- subset(rules, subset = (lhs %ain% \"fake=0\" | rhs %ain% \"fake=0\"))\ninspect(head(sort(rules_real, by=\"support\")))\n\n    lhs                                     rhs                support  \n[1] {fake=0}                             =&gt; {name..username=0} 0.4982639\n[2] {fake=0}                             =&gt; {profile.pic=1}    0.4965278\n[3] {fullname.words=Short, fake=0}       =&gt; {profile.pic=1}    0.4340278\n[4] {external.URL=0, fake=0}             =&gt; {name..username=0} 0.3836806\n[5] {name..username=0, X.followers=Lots} =&gt; {fake=0}           0.3125000\n[6] {X.followers=Lots}                   =&gt; {fake=0}           0.3125000\n    confidence coverage  lift     count\n[1] 0.9965278  0.5000000 1.032374 287  \n[2] 0.9930556  0.5000000 1.415842 286  \n[3] 0.9960159  0.4357639 1.420062 250  \n[4] 1.0000000  0.3836806 1.035971 221  \n[5] 0.9424084  0.3315972 1.884817 180  \n[6] 0.9375000  0.3333333 1.875000 180  \n\n\n\ninspect(subset(rules_real, subset = items %in% \"external.URL=1\"))\n\n    lhs                 rhs      support   confidence coverage  lift count\n[1] {external.URL=1} =&gt; {fake=0} 0.1163194 1          0.1163194 2    67   \n\n\n\ninspect(subset(rules_real, subset = items %in% c(\"X.followers=Regular\", \"X.followers=Lots\")))\n\n     lhs                             rhs                  support confidence  coverage     lift count\n[1]  {X.posts=Lots,                                                                                  \n      fake=0}                     =&gt; {X.followers=Lots} 0.1250000  0.9350649 0.1336806 2.805195    72\n[2]  {fullname.words=Short,                                                                          \n      private=0,                                                                                     \n      X.follows=Lots,                                                                                \n      fake=0}                     =&gt; {X.followers=Lots} 0.1388889  0.9302326 0.1493056 2.790698    80\n[3]  {private=0,                                                                                     \n      X.follows=Lots,                                                                                \n      fake=0}                     =&gt; {X.followers=Lots} 0.1545139  0.9270833 0.1666667 2.781250    89\n[4]  {X.posts=Lots,                                                                                  \n      X.followers=Lots}           =&gt; {fake=0}           0.1250000  1.0000000 0.1250000 2.000000    72\n[5]  {description.length=Medium,                                                                     \n      private=0,                                                                                     \n      X.followers=Lots}           =&gt; {fake=0}           0.1232639  1.0000000 0.1232639 2.000000    71\n[6]  {fullname.words=Short,                                                                          \n      description.length=Medium,                                                                     \n      X.followers=Lots}           =&gt; {fake=0}           0.1440972  1.0000000 0.1440972 2.000000    83\n[7]  {description.length=Medium,                                                                     \n      X.followers=Lots}           =&gt; {fake=0}           0.1562500  0.9890110 0.1579861 1.978022    90\n[8]  {X.posts=Regular,                                                                               \n      X.followers=Lots}           =&gt; {fake=0}           0.1215278  0.9722222 0.1250000 1.944444    70\n[9]  {profile.pic=1,                                                                                 \n      fullname.words=Short,                                                                          \n      X.followers=Lots}           =&gt; {fake=0}           0.2725694  0.9691358 0.2812500 1.938272   157\n[10] {profile.pic=1,                                                                                 \n      private=0,                                                                                     \n      X.followers=Lots}           =&gt; {fake=0}           0.2256944  0.9629630 0.2343750 1.925926   130\n[11] {fullname.words=Short,                                                                          \n      name..username=0,                                                                              \n      X.followers=Lots}           =&gt; {fake=0}           0.2725694  0.9573171 0.2847222 1.914634   157\n[12] {profile.pic=1,                                                                                 \n      X.followers=Lots}           =&gt; {fake=0}           0.3107639  0.9572193 0.3246528 1.914439   179\n[13] {fullname.words=Short,                                                                          \n      X.followers=Lots}           =&gt; {fake=0}           0.2725694  0.9515152 0.2864583 1.903030   157\n[14] {name..username=0,                                                                              \n      X.followers=Lots}           =&gt; {fake=0}           0.3125000  0.9424084 0.3315972 1.884817   180\n[15] {X.followers=Lots}           =&gt; {fake=0}           0.3125000  0.9375000 0.3333333 1.875000   180\n[16] {fullname.words=Short,                                                                          \n      X.followers=Lots,                                                                              \n      fake=0}                     =&gt; {profile.pic=1}    0.2725694  1.0000000 0.2725694 1.425743   157\n[17] {X.followers=Lots,                                                                              \n      fake=0}                     =&gt; {profile.pic=1}    0.3107639  0.9944444 0.3125000 1.417822   179\n[18] {X.followers=Lots,                                                                              \n      fake=0}                     =&gt; {name..username=0} 0.3125000  1.0000000 0.3125000 1.035971   180\n\n\nAdemás de las reglas que son opuestas a las obtenidas para las cuentas falsas, observamos que es usual para las cuentas reales que tengan alguna descripción, foto de perfil y algunos posts."
  },
  {
    "objectID": "reglas_asociacion.html#trabajando-con-itemsets",
    "href": "reglas_asociacion.html#trabajando-con-itemsets",
    "title": "Reglas de asociación",
    "section": "",
    "text": "Otra opción interesante que nos da arules es encontrar un conjunto de items, en lugar de reglas. Probemos a obtener itemsets con al menos dos items y un 1% de soporte.\n\nitemsets &lt;- apriori(data = insta_data, parameter = list(support = 0.01, minlen = 2, target = \"frequent itemset\"))\n\nApriori\n\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support minlen\n         NA    0.1    1 none FALSE            TRUE       5    0.01      2\n maxlen            target  ext\n     10 frequent itemsets TRUE\n\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE\n\nAbsolute minimum support count: 5 \n\nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[28 item(s), 576 transaction(s)] done [0.00s].\nsorting and recoding items ... [27 item(s)] done [0.00s].\ncreating transaction tree ... done [0.00s].\nchecking subsets of size 1 2 3 4 5 6 7 8 9 10 done [0.01s].\nsorting transactions ... done [0.00s].\nwriting ... [19655 set(s)] done [0.00s].\ncreating S4 object  ... done [0.00s].\n\nitemsets &lt;- sort(itemsets, by=\"support\")\n\nObservamos los primeros items.\n\ninspect(itemsets[1:10])\n\n     items                     support count\n[1]  {fullname.words=Short,                 \n      name..username=0}      0.8524306   491\n[2]  {name..username=0,                     \n      external.URL=0}        0.8506944   490\n[3]  {fullname.words=Short,                 \n      external.URL=0}        0.7829861   451\n[4]  {fullname.words=Short,                 \n      name..username=0,                     \n      external.URL=0}        0.7500000   432\n[5]  {profile.pic=1,                        \n      name..username=0}      0.6875000   396\n[6]  {profile.pic=1,                        \n      fullname.words=Short}  0.6093750   351\n[7]  {name..username=0,                     \n      private=0}             0.6006944   346\n[8]  {profile.pic=1,                        \n      fullname.words=Short,                 \n      name..username=0}      0.5954861   343\n[9]  {profile.pic=1,                        \n      external.URL=0}        0.5850694   337\n[10] {profile.pic=1,                        \n      name..username=0,                     \n      external.URL=0}        0.5729167   330\n\n\nY visualizamos los más frecuentes.\n\nas(itemsets[1:10], Class = \"data.frame\") %&gt;%\n  ggplot(aes(x = items, y = support)) +\n  geom_col(fill = \"brown3\") +\n  coord_flip()"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References\nBook de la asignatura\nProyecto Kaggle de Visualización\nProyecto de Regresión - RPubs\nfcaR: Formal Concept Analysis with R\nForecasting: Principles and Practice (2nd ed)\nInformación sobre los datos\nInformación sobre Quarto Books"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Conclusión",
    "section": "",
    "text": "Conclusión\nHemos visto muchos métodos para extraer conocimiento en cada uno de los capítulos, pero como consideración final hay que decir que esto es tan solo una pequeña parte dentro de una rama de estudio mucho más amplia y que, como queda evidenciado en cada capítulo, de gran utilidad e interés.\nEs importante entender que cada uno de estos métodos tienen unas características únicas y que, dependiendo de los datos que tengamos, habrá unos más útiles que otros. En el caso de las cuentas de Instagram, parece que el uso de reglas de asociación y visualización han sido los que más información nos han permitido extraer. Aunque es posible que alguien con una visión más exacta haya podido extraer conocimiento con otras técnicas que, a simple vista, no pareciesen adecuadas.\nPara ahondar más en esta materia, sería interesante tomar datos de distintos ámbitos y características, para estudiar las necesidades de cada uno de ellos. Por ejemplo, puede ser interesante tomar un dataset con datos médicos o de salud para construir un motor de diagnóstico o tomar registros de temperaturas para realizar predicciones sobre el cambio climático, ya que no hemos tenido oportunidad de exprimir el potencial de series temporales. Nos quedan infinitud de opciones por explorar."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introducción",
    "section": "",
    "text": "Introducción\nEste proyecto alberga una recopilación de los contenidos aprendidos en la asignatura Laboratorio de Computación Científica impartida en el grado de Ingeniería Informática.\nPara ello, se nos ha proporcionado un conjunto de datos sobre cuentas falsas de Instagram, del cual deberemos extraer conocimiento a través de las distintas técnicas aprendidas en la asignatura.\nEste dataset resulta especialmente interesante, pues vivimos unos tiempos donde abundan las fake news, estafas online y donde nada es lo que parece. Por todo esto, necesitamos desarrollar herramientas que nos permitan sacar información en claro dentro de la inmensa red que constituye internet.\nA pesar de parecer una tarea compleja y abrumadora, veremos que hay algoritmos y técnicas que se pueden aplicar de forma sencilla y que nos aportarán información muy valiosa.\nAsí que, sin más dilación, podemos ponernos manos a la obra."
  },
  {
    "objectID": "visualizacion.html",
    "href": "visualizacion.html",
    "title": "Visualización",
    "section": "",
    "text": "library(ggplot2)\nlibrary(magrittr)\nlibrary(highcharter)\nlibrary(ggthemes)\nlibrary(dplyr)\n\ndata_instagram &lt;- read.csv(\"train.csv\")\n\nPara este capítulo, será necesario utilizar la librería ggplot, que permite de forma sencilla crear gráficos para observar de forma más visual algunos datos del dataset y, con suerte, extraer información relevante sobre ellos.\n\n\nPara empezar, veamos una nube de puntos que muestre la relación entre el número de seguidores y seguidos de cada usuario en función de si la cuenta es falsa o no.\n\n# Para verlo con mayor facilidad, he acotado por donde están la mayoría de puntos\ndata_instagram[(data_instagram$X.followers&lt;1000 & data_instagram$X.follows&lt;1000),] %&gt;%\n  ggplot(aes(x=X.follows, y=X.followers)) + \n  geom_point(aes(color = fake)) +\n  labs(x=\"Número de seguidos\", y=\"Número de seguidores\") +\n  theme_minimal()\n\n\n\n\nComo ya sabíamos, la mayoría de cuentas falsas tienen pocos seguidores y, además, suelen seguir a pocas personas. También parece que la cantidad de seguidores y seguidos suele ser algo proporcional para aquellas cuentas que no son falsas. Esta proporcionalidad parece que no es tan notable en las cuentas falsas, pues suelen tener pocos seguidores como norma general.\nTodo esto se verá más claro si lo pasamos a escala logarítmica.\n\ndata_instagram[(data_instagram$X.followers&lt;1000 & data_instagram$X.follows&lt;1000),] %&gt;%\n  ggplot(aes(x=X.follows, y=X.followers)) + \n  geom_point(aes(color = fake)) +\n  labs(x=\"Número de seguidos\", y=\"Número de seguidores\") +\n  scale_x_log10() +\n  theme_minimal()\n\n\n\n\n\n\n\n\ndata_instagram[data_instagram$X.posts&lt;50,] %&gt;%\n  ggplot(aes(x=X.posts)) + \n  geom_histogram(stat=\"count\",fill=\"lightgreen\") +\n  labs(x=\"Número de publicaciones\") +\n  theme_minimal()\n\n\n\n\nObservamos que el histograma tiene tendencia descendente, por lo que la mayoría de cuentas tienen una cantidad pequeña de publicaciones. Sin embargo, las cuentas falsas pueden estar introduciendo ruido a este resultado, por lo que veámolas por separado.\n\ndata_instagram[data_instagram$X.posts&lt;50,] %&gt;%\n  ggplot(aes(x=X.posts)) + \n  geom_histogram(stat=\"count\",fill=\"lightgreen\") +\n  labs(x=\"Número de publicaciones\") +\n  facet_wrap(~fake) +\n  theme_minimal()\n\n\n\n\nComo habíamos supuesto, la gran mayoría de cuentas con ninguna o muy pocas publicaciones son falsas.\n\n\n\nEl siguiente paso, será estudiar la información que proporciona sobre sí mismo un usuario al uso, es decir, veremos si suelen tener descripciones o nombres de usuario largos, si tienen URL o si los perfiles suelen ser públicos o privados.\n\n# DUDA\ncount_profile.pic &lt;- data_instagram %&gt;%\n  count(profile.pic, fake)\n\ncount_external.URL &lt;- data_instagram %&gt;%\n  count(external.URL, fake)\n\ncount_private &lt;- data_instagram %&gt;%\n  count(private, fake)\n\ncount_name..username &lt;- data_instagram %&gt;%\n  count(name..username, fake)\n\ncounts_hchart &lt;- bind_rows(\n  mutate(count_profile.pic, variable = \"tiene_foto_perfil\"),\n  mutate(count_external.URL, variable = \"tiene_url_externa\"),\n  mutate(count_private, variable = \"cuenta_privada\"),\n  mutate(count_name..username, variable = \"username\")\n)\n\nhchart(counts_hchart, \"column\", hcaes(x = variable, y = n, group = fake)) %&gt;%\n    hc_title(text = \"Configuración usuarios reales frente a falsos\") %&gt;% \n  hc_add_theme(hc_theme_hcrt())\n\n\n\n\n\n\nTambién será interesante ver la longitud de las descripciones, pues es probable que las cuentas falsas se encuentren principalmente en el grupo con descripciones de menor longitud.\n\ndescripciones &lt;- cut(data_instagram$description.length, \n                      breaks = c(-1, 0, 22, 100, 151), \n                      labels = c(\"None\", \"Short\", \"Medium\", \"Large\"))\n\n\ndata_instagram &lt;- cbind(data_instagram, descripciones_size=descripciones)\n\n\nggplot(data = data_instagram, aes(x = \"\", fill = descripciones_size)) +\n  geom_bar() +\n  coord_polar(\"y\", start = 0) +\n  theme_void() +\n  scale_fill_manual(values = c(\"None\" = \"brown2\", \"Short\" = \"gold\", \"Medium\" = \"lightskyblue\", \"Large\" = \"palegreen\")) +\n  facet_wrap(~fake)\n\n\n\n\n\n\n\n\ndata_instagram[data_instagram$X.followers&gt;2000 & data_instagram$X.followers&lt;20000,] %&gt;%\n  ggplot(aes(x=X.followers, y=X.posts)) + \n  geom_line(aes(color=fake)) + \n  labs(x=\"Número de seguidores\", y=\"Número de posts\") +\n  theme_minimal()\n\n\n\n\nTras acotar dentro de unos parámetros razonables, parece que no hay una relación directa entre subir muchas publicaciones y tener muchos seguidores. Aunque si que podemos observar que la gran mayoría de cuentas que entran dentro de estos valores son reales.\nQuizá sea más interesante ver esta misma gráfica, pero para niveles bajos.\n\ndata_instagram[data_instagram$X.followers&gt;0 & data_instagram$X.followers&lt;500,] %&gt;%\n  ggplot(aes(x=X.followers, y=X.posts)) + \n  geom_line(aes(color=fake)) + \n  labs(x=\"Número de seguidores\", y=\"Número de posts\") +\n  theme_minimal()\n\n\n\n\nPara estos valores parece que se complica la acción de diferencias aquellas cuentas que son reales de las que no. Por tanto, es probable que en el futuro necesitemos de la ayuda de otros atributos para sacar conclusiones con menor grado de incertidumbre.\nTras el análisis exploratorio y la visualización de los datos, hemos conseguido adentrarnos de forma más detallada en nuestro conjunto de datos y ya estamos preparados para ir un paso más allá. Es por esto, que en el siguiente capítulo nos centraremos en crear reglas de asociación, que es una técnica de aprendizaje no supervisado que nos ayudará a extraer piezas de conocimiento bastante interesantes."
  },
  {
    "objectID": "visualizacion.html#existe-relación-entre-el-número-de-seguidores-y-seguidos",
    "href": "visualizacion.html#existe-relación-entre-el-número-de-seguidores-y-seguidos",
    "title": "Visualización",
    "section": "",
    "text": "Para empezar, veamos una nube de puntos que muestre la relación entre el número de seguidores y seguidos de cada usuario en función de si la cuenta es falsa o no.\n\n# Para verlo con mayor facilidad, he acotado por donde están la mayoría de puntos\ndata_instagram[(data_instagram$X.followers&lt;1000 & data_instagram$X.follows&lt;1000),] %&gt;%\n  ggplot(aes(x=X.follows, y=X.followers)) + \n  geom_point(aes(color = fake)) +\n  labs(x=\"Número de seguidos\", y=\"Número de seguidores\") +\n  theme_minimal()\n\n\n\n\nComo ya sabíamos, la mayoría de cuentas falsas tienen pocos seguidores y, además, suelen seguir a pocas personas. También parece que la cantidad de seguidores y seguidos suele ser algo proporcional para aquellas cuentas que no son falsas. Esta proporcionalidad parece que no es tan notable en las cuentas falsas, pues suelen tener pocos seguidores como norma general.\nTodo esto se verá más claro si lo pasamos a escala logarítmica.\n\ndata_instagram[(data_instagram$X.followers&lt;1000 & data_instagram$X.follows&lt;1000),] %&gt;%\n  ggplot(aes(x=X.follows, y=X.followers)) + \n  geom_point(aes(color = fake)) +\n  labs(x=\"Número de seguidos\", y=\"Número de seguidores\") +\n  scale_x_log10() +\n  theme_minimal()"
  },
  {
    "objectID": "visualizacion.html#cuántas-publicaciones-suele-tener-una-cuenta",
    "href": "visualizacion.html#cuántas-publicaciones-suele-tener-una-cuenta",
    "title": "Visualización",
    "section": "",
    "text": "data_instagram[data_instagram$X.posts&lt;50,] %&gt;%\n  ggplot(aes(x=X.posts)) + \n  geom_histogram(stat=\"count\",fill=\"lightgreen\") +\n  labs(x=\"Número de publicaciones\") +\n  theme_minimal()\n\n\n\n\nObservamos que el histograma tiene tendencia descendente, por lo que la mayoría de cuentas tienen una cantidad pequeña de publicaciones. Sin embargo, las cuentas falsas pueden estar introduciendo ruido a este resultado, por lo que veámolas por separado.\n\ndata_instagram[data_instagram$X.posts&lt;50,] %&gt;%\n  ggplot(aes(x=X.posts)) + \n  geom_histogram(stat=\"count\",fill=\"lightgreen\") +\n  labs(x=\"Número de publicaciones\") +\n  facet_wrap(~fake) +\n  theme_minimal()\n\n\n\n\nComo habíamos supuesto, la gran mayoría de cuentas con ninguna o muy pocas publicaciones son falsas."
  },
  {
    "objectID": "visualizacion.html#cómo-suele-configurar-un-usuario-su-cuenta",
    "href": "visualizacion.html#cómo-suele-configurar-un-usuario-su-cuenta",
    "title": "Visualización",
    "section": "",
    "text": "El siguiente paso, será estudiar la información que proporciona sobre sí mismo un usuario al uso, es decir, veremos si suelen tener descripciones o nombres de usuario largos, si tienen URL o si los perfiles suelen ser públicos o privados.\n\n# DUDA\ncount_profile.pic &lt;- data_instagram %&gt;%\n  count(profile.pic, fake)\n\ncount_external.URL &lt;- data_instagram %&gt;%\n  count(external.URL, fake)\n\ncount_private &lt;- data_instagram %&gt;%\n  count(private, fake)\n\ncount_name..username &lt;- data_instagram %&gt;%\n  count(name..username, fake)\n\ncounts_hchart &lt;- bind_rows(\n  mutate(count_profile.pic, variable = \"tiene_foto_perfil\"),\n  mutate(count_external.URL, variable = \"tiene_url_externa\"),\n  mutate(count_private, variable = \"cuenta_privada\"),\n  mutate(count_name..username, variable = \"username\")\n)\n\nhchart(counts_hchart, \"column\", hcaes(x = variable, y = n, group = fake)) %&gt;%\n    hc_title(text = \"Configuración usuarios reales frente a falsos\") %&gt;% \n  hc_add_theme(hc_theme_hcrt())\n\n\n\n\n\n\nTambién será interesante ver la longitud de las descripciones, pues es probable que las cuentas falsas se encuentren principalmente en el grupo con descripciones de menor longitud.\n\ndescripciones &lt;- cut(data_instagram$description.length, \n                      breaks = c(-1, 0, 22, 100, 151), \n                      labels = c(\"None\", \"Short\", \"Medium\", \"Large\"))\n\n\ndata_instagram &lt;- cbind(data_instagram, descripciones_size=descripciones)\n\n\nggplot(data = data_instagram, aes(x = \"\", fill = descripciones_size)) +\n  geom_bar() +\n  coord_polar(\"y\", start = 0) +\n  theme_void() +\n  scale_fill_manual(values = c(\"None\" = \"brown2\", \"Short\" = \"gold\", \"Medium\" = \"lightskyblue\", \"Large\" = \"palegreen\")) +\n  facet_wrap(~fake)"
  },
  {
    "objectID": "visualizacion.html#influye-la-actividad-de-una-cuenta-en-su-número-de-seguidores",
    "href": "visualizacion.html#influye-la-actividad-de-una-cuenta-en-su-número-de-seguidores",
    "title": "Visualización",
    "section": "",
    "text": "data_instagram[data_instagram$X.followers&gt;2000 & data_instagram$X.followers&lt;20000,] %&gt;%\n  ggplot(aes(x=X.followers, y=X.posts)) + \n  geom_line(aes(color=fake)) + \n  labs(x=\"Número de seguidores\", y=\"Número de posts\") +\n  theme_minimal()\n\n\n\n\nTras acotar dentro de unos parámetros razonables, parece que no hay una relación directa entre subir muchas publicaciones y tener muchos seguidores. Aunque si que podemos observar que la gran mayoría de cuentas que entran dentro de estos valores son reales.\nQuizá sea más interesante ver esta misma gráfica, pero para niveles bajos.\n\ndata_instagram[data_instagram$X.followers&gt;0 & data_instagram$X.followers&lt;500,] %&gt;%\n  ggplot(aes(x=X.followers, y=X.posts)) + \n  geom_line(aes(color=fake)) + \n  labs(x=\"Número de seguidores\", y=\"Número de posts\") +\n  theme_minimal()\n\n\n\n\nPara estos valores parece que se complica la acción de diferencias aquellas cuentas que son reales de las que no. Por tanto, es probable que en el futuro necesitemos de la ayuda de otros atributos para sacar conclusiones con menor grado de incertidumbre.\nTras el análisis exploratorio y la visualización de los datos, hemos conseguido adentrarnos de forma más detallada en nuestro conjunto de datos y ya estamos preparados para ir un paso más allá. Es por esto, que en el siguiente capítulo nos centraremos en crear reglas de asociación, que es una técnica de aprendizaje no supervisado que nos ayudará a extraer piezas de conocimiento bastante interesantes."
  },
  {
    "objectID": "FCA.html",
    "href": "FCA.html",
    "title": "Análisis Formal de Contextos",
    "section": "",
    "text": "El siguiente método que vamos a utilizar es FCA, que nos ayuda a describir relaciones entre grupos de objetos y atributos. Para este conjunto de datos ya hemos visto algunas relaciones interesantes al trabajar con reglas de asociación, por lo que esperamos extraer un conocimiento similar con esta técnica.\n\nlibrary(fcaR)\nlibrary(dplyr)\nlibrary(hasseDiagram)\n\n\n\nVamos a aprovechar que nuestro conjunto de datos tiene bastantes atributos binarios para construir el concepto formal. Por tanto, vamos a transformar aquellas columnas que nos lo permitan a binarias si no lo son y vamos a eliminar el resto.\n\ninsta_fca &lt;- read.csv(\"train.csv\")\n\n# Elimino columnas\ninsta_fca$nums.length.fullname &lt;- NULL\ninsta_fca$nums.length.username &lt;- NULL\n\n# Discretizo\ninsta_fca$description.length &lt;- cut(insta_fca$description.length, \n                      breaks = c(-1, 0, 22, 100, Inf), \n                      labels = c(\"None\", \"Short\", \"Medium\", \"Long\"))\ninsta_fca$fullname.words &lt;- cut(insta_fca$fullname.words, \n                      breaks = c(-1, 0, 4, 8, Inf), \n                      labels = c(\"None\", \"Short\", \"Medium\", \"Long\"))\ninsta_fca$X.posts &lt;- cut(insta_fca$X.posts, \n                      breaks = c(-1, 0, 50, 200, Inf), \n                      labels = c(\"None\", \"Few\", \"Regular\", \"Lots\"))\ninsta_fca$X.followers &lt;- cut(insta_fca$X.followers, \n                      breaks = c(-1, 0, 2000, 80000, Inf), \n                      labels = c(\"None\", \"Few\", \"Regular\", \"Lots\"))\ninsta_fca$X.follows &lt;- cut(insta_fca$X.follows, \n                      breaks = c(-1, 0, 50, 500, Inf), \n                      labels = c(\"None\", \"Few\", \"Regular\", \"Lots\"))\n\n\n# Convierto a binarias\ninsta_fca &lt;- insta_fca %&gt;%\n  mutate(\n    none_description = if_else(description.length == \"None\", 1, 0),\n    short_description = if_else(description.length == \"Short\", 1, 0),\n    medium_description = if_else(description.length == \"Medium\", 1, 0),\n    long_description = if_else(description.length == \"Long\", 1, 0))\n\ninsta_fca &lt;- insta_fca %&gt;%\n  mutate(\n    none_fullname.words = if_else(fullname.words == \"None\", 1, 0),\n    short_fullname.words = if_else(fullname.words == \"Short\", 1, 0),\n    medium_fullname.words = if_else(fullname.words == \"Medium\", 1, 0),\n    long_fullname.words = if_else(fullname.words == \"Long\", 1, 0))\n\ninsta_fca &lt;- insta_fca %&gt;%\n  mutate(\n    none_posts = if_else(X.posts == \"None\", 1, 0),\n    few_posts = if_else(X.posts == \"Few\", 1, 0),\n    regular_posts = if_else(X.posts == \"Regular\", 1, 0),\n    lots_posts = if_else(X.posts == \"Lots\", 1, 0))\n\ninsta_fca &lt;- insta_fca %&gt;%\n  mutate(\n    none_followers = if_else(X.followers == \"None\", 1, 0),\n    few_followers = if_else(X.followers == \"Few\", 1, 0),\n    regular_followers = if_else(X.followers == \"Regular\", 1, 0),\n    lots_followers = if_else(X.followers == \"Lots\", 1, 0))\n\ninsta_fca &lt;- insta_fca %&gt;%\n  mutate(\n    none_follows = if_else(X.follows == \"None\", 1, 0),\n    few_follows = if_else(X.follows == \"Few\", 1, 0),\n    regular_follows = if_else(X.follows == \"Regular\", 1, 0),\n    lots_follows = if_else(X.follows == \"Lots\", 1, 0))\n\n# Elimino las columnas que ya no necesito\ninsta_fca$description.length &lt;- NULL\ninsta_fca$fullname.words &lt;- NULL\ninsta_fca$X.posts &lt;- NULL\ninsta_fca$X.followers &lt;- NULL\ninsta_fca$X.follows &lt;- NULL\n\n\n\n\n\n# Creo el contexto formal\nfc &lt;- FormalContext$new(insta_fca)\n\n\n# Lo visualizo\nfc$plot()\n\n\n\n\n\n# Conceptos\nfc$find_concepts()\nfc$concepts[1:3]\n\nA set of 3 concepts:\n1: ({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576}, {})\n2: ({1, 2, 4, 9, 10, 11, 13, 15, 16, 18, 19, 20, 21, 24, 27, 31, 32, 34, 35, 36, 38, 42, 43, 49, 50, 52, 54, 57, 59, 65, 66, 68, 69, 70, 72, 77, 80, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 106, 107, 108, 111, 112, 116, 117, 119, 123, 126, 130, 131, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 147, 152, 153, 154, 155, 156, 157, 158, 164, 169, 170, 173, 174, 175, 176, 178, 193, 194, 195, 196, 197, 198, 200, 201, 206, 207, 208, 209, 214, 215, 218, 223, 230, 232, 234, 236, 237, 239, 241, 246, 248, 256, 257, 260, 261, 263, 265, 266, 269, 271, 277, 278, 280, 284, 296, 320, 322, 324, 332, 339, 344, 354, 356, 360, 361, 382, 399, 401, 420, 445, 454, 460, 462, 467, 471, 476, 482, 483, 508, 509, 511, 512, 518, 531, 532, 534, 535, 536, 538, 539, 549, 553, 554, 567, 570, 572}, {lots_follows})\n3: ({3, 5, 6, 7, 8, 12, 14, 17, 22, 23, 25, 26, 28, 29, 30, 33, 37, 39, 40, 47, 48, 51, 53, 55, 56, 58, 60, 61, 62, 63, 64, 67, 71, 73, 74, 75, 78, 79, 81, 82, 83, 86, 94, 98, 100, 101, 102, 103, 105, 109, 110, 113, 114, 115, 118, 120, 121, 122, 124, 125, 127, 128, 129, 134, 135, 140, 145, 146, 148, 149, 150, 151, 159, 160, 161, 162, 163, 165, 167, 168, 171, 172, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 199, 202, 203, 204, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 233, 235, 238, 240, 243, 244, 249, 250, 251, 252, 253, 254, 255, 258, 259, 262, 264, 267, 268, 270, 272, 273, 274, 275, 276, 279, 282, 283, 285, 286, 288, 289, 291, 292, 293, 294, 303, 305, 306, 310, 315, 317, 318, 323, 325, 328, 329, 334, 335, 338, 343, 345, 347, 348, 349, 352, 358, 359, 362, 363, 364, 365, 368, 370, 372, 375, 376, 378, 380, 381, 383, 385, 386, 391, 393, 395, 396, 397, 400, 402, 403, 404, 405, 406, 407, 410, 411, 413, 415, 416, 417, 419, 421, 422, 424, 427, 428, 429, 431, 433, 434, 435, 436, 438, 439, 440, 443, 444, 446, 447, 448, 450, 451, 453, 457, 458, 459, 461, 463, 465, 474, 477, 484, 488, 491, 502, 521, 523, 527, 528, 530, 541, 542, 545, 546, 547, 548, 550, 551, 555, 556, 558, 560, 561, 562, 563, 564, 566, 568, 569, 571, 573, 574, 575, 576}, {regular_follows})\n\n\n\n# Implicaciones\nfc$find_implications()\nfc$implications[1:5]\n\nImplication set with 5 implications.\nRule 1: {regular_follows, lots_follows} -&gt; {profile.pic, name..username,\n  external.URL, private, fake, none_description, short_description,\n  medium_description, long_description, none_fullname.words,\n  short_fullname.words, medium_fullname.words, long_fullname.words, none_posts,\n  few_posts, regular_posts, lots_posts, none_followers, few_followers,\n  regular_followers, lots_followers, none_follows, few_follows}\nRule 2: {few_follows, lots_follows} -&gt; {profile.pic, name..username,\n  external.URL, private, fake, none_description, short_description,\n  medium_description, long_description, none_fullname.words,\n  short_fullname.words, medium_fullname.words, long_fullname.words, none_posts,\n  few_posts, regular_posts, lots_posts, none_followers, few_followers,\n  regular_followers, lots_followers, none_follows, regular_follows}\nRule 3: {few_follows, regular_follows} -&gt; {profile.pic, name..username,\n  external.URL, private, fake, none_description, short_description,\n  medium_description, long_description, none_fullname.words,\n  short_fullname.words, medium_fullname.words, long_fullname.words, none_posts,\n  few_posts, regular_posts, lots_posts, none_followers, few_followers,\n  regular_followers, lots_followers, none_follows, lots_follows}\nRule 4: {none_follows, lots_follows} -&gt; {profile.pic, name..username,\n  external.URL, private, fake, none_description, short_description,\n  medium_description, long_description, none_fullname.words,\n  short_fullname.words, medium_fullname.words, long_fullname.words, none_posts,\n  few_posts, regular_posts, lots_posts, none_followers, few_followers,\n  regular_followers, lots_followers, few_follows, regular_follows}\nRule 5: {none_follows, regular_follows} -&gt; {profile.pic, name..username,\n  external.URL, private, fake, none_description, short_description,\n  medium_description, long_description, none_fullname.words,\n  short_fullname.words, medium_fullname.words, long_fullname.words, none_posts,\n  few_posts, regular_posts, lots_posts, none_followers, few_followers,\n  regular_followers, lots_followers, few_follows, lots_follows}\n\n\n\nsizes &lt;- fc$implications$size()\ncolMeans(sizes)\n\n     LHS      RHS \n3.949749 4.831658 \n\n\n\n\n\nDentro de todo el concepto formal, puede ser que nos interese filtrar o eliminar datos que no estén dentro de unos parámetros. Para ello, podemos por ejemplo filtrar por aquellos conceptos que tengan un soporte mayor al 50%.\n\nindices &lt;- which(fc$concepts$support()&gt;0.5)\nsublattice &lt;- fc$concepts$sublattice(indices)\n\nsublattice$print()\n\nA set of 16 concepts:\n1: ({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222}, {})\n2: ({1, 3, 4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 20, 23, 24, 25, 26, 29, 30, 31, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 89, 90, 92, 93, 95, 96, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 113, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 220, 221, 222}, {few_followers})\n3: ({2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 78, 80, 82, 83, 85, 86, 87, 88, 90, 92, 93, 94, 96, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 125, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 173, 174, 175, 176, 180, 181, 184, 185, 186, 187, 188, 189, 190, 193, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222}, {short_fullname.words})\n4: ({3, 4, 6, 7, 10, 11, 13, 16, 17, 19, 23, 24, 26, 30, 31, 37, 38, 40, 41, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 73, 74, 75, 76, 78, 80, 85, 86, 88, 90, 92, 93, 96, 100, 101, 102, 103, 104, 107, 109, 111, 119, 120, 121, 125, 127, 128, 130, 131, 132, 133, 134, 136, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 156, 157, 161, 162, 163, 164, 165, 166, 167, 168, 171, 173, 174, 175, 176, 180, 181, 185, 186, 187, 190, 193, 195, 196, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 216, 217, 218, 220, 221, 222}, {short_fullname.words, few_followers})\n5: ({3, 7, 11, 14, 18, 20, 25, 29, 33, 46, 47, 50, 52, 57, 62, 64, 65, 70, 76, 78, 79, 88, 89, 90, 102, 104, 114, 116, 120, 122, 123, 125, 126, 127, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 173, 175, 176, 179, 181, 183, 184, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 200, 205, 207, 208, 209, 212, 214, 215, 218, 219, 220}, {none_description})\n6: ({3, 7, 11, 20, 25, 29, 46, 50, 52, 57, 64, 65, 70, 76, 78, 79, 88, 89, 90, 102, 104, 120, 122, 123, 125, 126, 127, 129, 130, 132, 133, 134, 135, 140, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 166, 169, 170, 171, 172, 173, 175, 176, 179, 181, 183, 187, 190, 192, 193, 194, 195, 198, 200, 205, 207, 208, 209, 212, 214, 218, 220}, {none_description, few_followers})\n7: ({3, 7, 11, 14, 33, 46, 47, 50, 52, 57, 64, 65, 70, 76, 78, 88, 90, 102, 104, 114, 116, 120, 125, 127, 130, 132, 133, 134, 138, 139, 140, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 166, 171, 173, 175, 176, 181, 184, 187, 188, 189, 190, 193, 195, 197, 198, 205, 207, 208, 209, 215, 218, 219, 220}, {none_description, short_fullname.words})\n8: ({3, 7, 11, 46, 50, 52, 57, 64, 65, 70, 76, 78, 88, 90, 102, 104, 120, 125, 127, 130, 132, 133, 134, 140, 142, 143, 144, 145, 146, 147, 151, 153, 154, 156, 157, 161, 162, 163, 164, 166, 171, 173, 175, 176, 181, 187, 190, 193, 195, 198, 205, 207, 208, 209, 218, 220}, {none_description, short_fullname.words, few_followers})\n9: ({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 139, 143, 144, 147, 149, 150, 153, 154, 155, 157, 158, 159, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 190, 191, 194, 195, 196, 197, 198, 202, 203, 204, 205, 206, 207, 208, 210, 213, 216, 221, 222}, {profile.pic})\n10: ({1, 3, 4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 20, 23, 24, 25, 26, 29, 30, 31, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 89, 90, 92, 93, 96, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 113, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 143, 144, 147, 149, 150, 153, 154, 155, 157, 159, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 190, 191, 194, 195, 196, 198, 202, 203, 204, 205, 206, 207, 208, 210, 213, 216, 221, 222}, {profile.pic, few_followers})\n11: ({2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 78, 80, 82, 83, 85, 86, 87, 88, 90, 92, 93, 94, 96, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 125, 127, 128, 130, 136, 139, 143, 144, 147, 149, 150, 153, 154, 157, 158, 164, 165, 166, 167, 171, 173, 174, 175, 176, 180, 181, 185, 190, 195, 196, 197, 198, 202, 204, 205, 206, 207, 208, 210, 213, 216, 221, 222}, {profile.pic, short_fullname.words})\n12: ({3, 4, 6, 7, 10, 11, 13, 16, 17, 19, 23, 24, 26, 30, 31, 37, 38, 40, 41, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 73, 74, 75, 76, 78, 80, 85, 86, 88, 90, 92, 93, 96, 100, 101, 102, 103, 104, 107, 109, 111, 119, 120, 121, 125, 127, 128, 130, 136, 143, 144, 147, 149, 150, 153, 154, 157, 164, 165, 166, 167, 171, 173, 174, 175, 176, 180, 181, 185, 190, 195, 196, 198, 202, 204, 205, 206, 207, 208, 210, 213, 216, 221, 222}, {profile.pic, short_fullname.words, few_followers})\n13: ({3, 7, 11, 14, 18, 20, 25, 29, 33, 46, 47, 50, 52, 57, 62, 64, 65, 70, 76, 78, 79, 88, 89, 90, 102, 104, 114, 116, 120, 122, 123, 125, 126, 127, 129, 130, 135, 139, 143, 144, 147, 153, 154, 155, 157, 158, 159, 164, 166, 169, 170, 171, 172, 173, 175, 176, 181, 190, 194, 195, 197, 198, 205, 207, 208}, {profile.pic, none_description})\n14: ({3, 7, 11, 20, 25, 29, 46, 50, 52, 57, 64, 65, 70, 76, 78, 79, 88, 89, 90, 102, 104, 120, 122, 123, 125, 126, 127, 129, 130, 135, 143, 144, 147, 153, 154, 155, 157, 159, 164, 166, 169, 170, 171, 172, 173, 175, 176, 181, 190, 194, 195, 198, 205, 207, 208}, {profile.pic, none_description, few_followers})\n15: ({3, 7, 11, 14, 33, 46, 47, 50, 52, 57, 64, 65, 70, 76, 78, 88, 90, 102, 104, 114, 116, 120, 125, 127, 130, 139, 143, 144, 147, 153, 154, 157, 158, 164, 166, 171, 173, 175, 176, 181, 190, 195, 197, 198, 205, 207, 208}, {profile.pic, none_description, short_fullname.words})\n16: ({3, 7, 11, 46, 50, 52, 57, 64, 65, 70, 76, 78, 88, 90, 102, 104, 120, 125, 127, 130, 143, 144, 147, 153, 154, 157, 164, 166, 171, 173, 175, 176, 181, 190, 195, 198, 205, 207, 208}, {profile.pic, none_description, short_fullname.words, few_followers})\n\n\n\n# Lo visualizamos\nsublattice$plot()\n\n\n\n\n\n\n\nOtra operación interesante que podemos realizar es la de crear distintos sets y obtener información a partir de ellos.\n\n# Defino un set con cuentas falsas\nSfake &lt;- Set$new(attributes = fc$attributes)\nSfake$assign(fake = 1)\nSfake\n\n{fake}\n\n\nCon el método extent podemos obtener el conjunto de atributos que contienen las características del set que hemos especificado.\n\nfc$extent(Sfake)\n\n{289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304,\n  305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319,\n  320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334,\n  335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,\n  350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364,\n  365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379,\n  380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394,\n  395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409,\n  410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424,\n  425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439,\n  440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,\n  455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469,\n  470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484,\n  485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499,\n  500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514,\n  515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529,\n  530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544,\n  545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559,\n  560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574,\n  575, 576}\n\n\nTambién podemos obtener los atributos que tienen en común con intent.\n\nfc$intent(Sfake)\n\n{profile.pic, name..username, external.URL, private, fake, none_description,\n  short_description, medium_description, long_description, none_fullname.words,\n  short_fullname.words, medium_fullname.words, long_fullname.words, none_posts,\n  few_posts, regular_posts, lots_posts, none_followers, few_followers,\n  regular_followers, lots_followers, none_follows, few_follows, regular_follows,\n  lots_follows}"
  },
  {
    "objectID": "FCA.html#preprocesamiento",
    "href": "FCA.html#preprocesamiento",
    "title": "Análisis Formal de Contextos",
    "section": "",
    "text": "Vamos a aprovechar que nuestro conjunto de datos tiene bastantes atributos binarios para construir el concepto formal. Por tanto, vamos a transformar aquellas columnas que nos lo permitan a binarias si no lo son y vamos a eliminar el resto.\n\ninsta_fca &lt;- read.csv(\"train.csv\")\n\n# Elimino columnas\ninsta_fca$nums.length.fullname &lt;- NULL\ninsta_fca$nums.length.username &lt;- NULL\n\n# Discretizo\ninsta_fca$description.length &lt;- cut(insta_fca$description.length, \n                      breaks = c(-1, 0, 22, 100, Inf), \n                      labels = c(\"None\", \"Short\", \"Medium\", \"Long\"))\ninsta_fca$fullname.words &lt;- cut(insta_fca$fullname.words, \n                      breaks = c(-1, 0, 4, 8, Inf), \n                      labels = c(\"None\", \"Short\", \"Medium\", \"Long\"))\ninsta_fca$X.posts &lt;- cut(insta_fca$X.posts, \n                      breaks = c(-1, 0, 50, 200, Inf), \n                      labels = c(\"None\", \"Few\", \"Regular\", \"Lots\"))\ninsta_fca$X.followers &lt;- cut(insta_fca$X.followers, \n                      breaks = c(-1, 0, 2000, 80000, Inf), \n                      labels = c(\"None\", \"Few\", \"Regular\", \"Lots\"))\ninsta_fca$X.follows &lt;- cut(insta_fca$X.follows, \n                      breaks = c(-1, 0, 50, 500, Inf), \n                      labels = c(\"None\", \"Few\", \"Regular\", \"Lots\"))\n\n\n# Convierto a binarias\ninsta_fca &lt;- insta_fca %&gt;%\n  mutate(\n    none_description = if_else(description.length == \"None\", 1, 0),\n    short_description = if_else(description.length == \"Short\", 1, 0),\n    medium_description = if_else(description.length == \"Medium\", 1, 0),\n    long_description = if_else(description.length == \"Long\", 1, 0))\n\ninsta_fca &lt;- insta_fca %&gt;%\n  mutate(\n    none_fullname.words = if_else(fullname.words == \"None\", 1, 0),\n    short_fullname.words = if_else(fullname.words == \"Short\", 1, 0),\n    medium_fullname.words = if_else(fullname.words == \"Medium\", 1, 0),\n    long_fullname.words = if_else(fullname.words == \"Long\", 1, 0))\n\ninsta_fca &lt;- insta_fca %&gt;%\n  mutate(\n    none_posts = if_else(X.posts == \"None\", 1, 0),\n    few_posts = if_else(X.posts == \"Few\", 1, 0),\n    regular_posts = if_else(X.posts == \"Regular\", 1, 0),\n    lots_posts = if_else(X.posts == \"Lots\", 1, 0))\n\ninsta_fca &lt;- insta_fca %&gt;%\n  mutate(\n    none_followers = if_else(X.followers == \"None\", 1, 0),\n    few_followers = if_else(X.followers == \"Few\", 1, 0),\n    regular_followers = if_else(X.followers == \"Regular\", 1, 0),\n    lots_followers = if_else(X.followers == \"Lots\", 1, 0))\n\ninsta_fca &lt;- insta_fca %&gt;%\n  mutate(\n    none_follows = if_else(X.follows == \"None\", 1, 0),\n    few_follows = if_else(X.follows == \"Few\", 1, 0),\n    regular_follows = if_else(X.follows == \"Regular\", 1, 0),\n    lots_follows = if_else(X.follows == \"Lots\", 1, 0))\n\n# Elimino las columnas que ya no necesito\ninsta_fca$description.length &lt;- NULL\ninsta_fca$fullname.words &lt;- NULL\ninsta_fca$X.posts &lt;- NULL\ninsta_fca$X.followers &lt;- NULL\ninsta_fca$X.follows &lt;- NULL"
  },
  {
    "objectID": "FCA.html#contexto-formal",
    "href": "FCA.html#contexto-formal",
    "title": "Análisis Formal de Contextos",
    "section": "",
    "text": "# Creo el contexto formal\nfc &lt;- FormalContext$new(insta_fca)\n\n\n# Lo visualizo\nfc$plot()\n\n\n\n\n\n# Conceptos\nfc$find_concepts()\nfc$concepts[1:3]\n\nA set of 3 concepts:\n1: ({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576}, {})\n2: ({1, 2, 4, 9, 10, 11, 13, 15, 16, 18, 19, 20, 21, 24, 27, 31, 32, 34, 35, 36, 38, 42, 43, 49, 50, 52, 54, 57, 59, 65, 66, 68, 69, 70, 72, 77, 80, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 106, 107, 108, 111, 112, 116, 117, 119, 123, 126, 130, 131, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 147, 152, 153, 154, 155, 156, 157, 158, 164, 169, 170, 173, 174, 175, 176, 178, 193, 194, 195, 196, 197, 198, 200, 201, 206, 207, 208, 209, 214, 215, 218, 223, 230, 232, 234, 236, 237, 239, 241, 246, 248, 256, 257, 260, 261, 263, 265, 266, 269, 271, 277, 278, 280, 284, 296, 320, 322, 324, 332, 339, 344, 354, 356, 360, 361, 382, 399, 401, 420, 445, 454, 460, 462, 467, 471, 476, 482, 483, 508, 509, 511, 512, 518, 531, 532, 534, 535, 536, 538, 539, 549, 553, 554, 567, 570, 572}, {lots_follows})\n3: ({3, 5, 6, 7, 8, 12, 14, 17, 22, 23, 25, 26, 28, 29, 30, 33, 37, 39, 40, 47, 48, 51, 53, 55, 56, 58, 60, 61, 62, 63, 64, 67, 71, 73, 74, 75, 78, 79, 81, 82, 83, 86, 94, 98, 100, 101, 102, 103, 105, 109, 110, 113, 114, 115, 118, 120, 121, 122, 124, 125, 127, 128, 129, 134, 135, 140, 145, 146, 148, 149, 150, 151, 159, 160, 161, 162, 163, 165, 167, 168, 171, 172, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 199, 202, 203, 204, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 231, 233, 235, 238, 240, 243, 244, 249, 250, 251, 252, 253, 254, 255, 258, 259, 262, 264, 267, 268, 270, 272, 273, 274, 275, 276, 279, 282, 283, 285, 286, 288, 289, 291, 292, 293, 294, 303, 305, 306, 310, 315, 317, 318, 323, 325, 328, 329, 334, 335, 338, 343, 345, 347, 348, 349, 352, 358, 359, 362, 363, 364, 365, 368, 370, 372, 375, 376, 378, 380, 381, 383, 385, 386, 391, 393, 395, 396, 397, 400, 402, 403, 404, 405, 406, 407, 410, 411, 413, 415, 416, 417, 419, 421, 422, 424, 427, 428, 429, 431, 433, 434, 435, 436, 438, 439, 440, 443, 444, 446, 447, 448, 450, 451, 453, 457, 458, 459, 461, 463, 465, 474, 477, 484, 488, 491, 502, 521, 523, 527, 528, 530, 541, 542, 545, 546, 547, 548, 550, 551, 555, 556, 558, 560, 561, 562, 563, 564, 566, 568, 569, 571, 573, 574, 575, 576}, {regular_follows})\n\n\n\n# Implicaciones\nfc$find_implications()\nfc$implications[1:5]\n\nImplication set with 5 implications.\nRule 1: {regular_follows, lots_follows} -&gt; {profile.pic, name..username,\n  external.URL, private, fake, none_description, short_description,\n  medium_description, long_description, none_fullname.words,\n  short_fullname.words, medium_fullname.words, long_fullname.words, none_posts,\n  few_posts, regular_posts, lots_posts, none_followers, few_followers,\n  regular_followers, lots_followers, none_follows, few_follows}\nRule 2: {few_follows, lots_follows} -&gt; {profile.pic, name..username,\n  external.URL, private, fake, none_description, short_description,\n  medium_description, long_description, none_fullname.words,\n  short_fullname.words, medium_fullname.words, long_fullname.words, none_posts,\n  few_posts, regular_posts, lots_posts, none_followers, few_followers,\n  regular_followers, lots_followers, none_follows, regular_follows}\nRule 3: {few_follows, regular_follows} -&gt; {profile.pic, name..username,\n  external.URL, private, fake, none_description, short_description,\n  medium_description, long_description, none_fullname.words,\n  short_fullname.words, medium_fullname.words, long_fullname.words, none_posts,\n  few_posts, regular_posts, lots_posts, none_followers, few_followers,\n  regular_followers, lots_followers, none_follows, lots_follows}\nRule 4: {none_follows, lots_follows} -&gt; {profile.pic, name..username,\n  external.URL, private, fake, none_description, short_description,\n  medium_description, long_description, none_fullname.words,\n  short_fullname.words, medium_fullname.words, long_fullname.words, none_posts,\n  few_posts, regular_posts, lots_posts, none_followers, few_followers,\n  regular_followers, lots_followers, few_follows, regular_follows}\nRule 5: {none_follows, regular_follows} -&gt; {profile.pic, name..username,\n  external.URL, private, fake, none_description, short_description,\n  medium_description, long_description, none_fullname.words,\n  short_fullname.words, medium_fullname.words, long_fullname.words, none_posts,\n  few_posts, regular_posts, lots_posts, none_followers, few_followers,\n  regular_followers, lots_followers, few_follows, lots_follows}\n\n\n\nsizes &lt;- fc$implications$size()\ncolMeans(sizes)\n\n     LHS      RHS \n3.949749 4.831658"
  },
  {
    "objectID": "FCA.html#un-subretículo-simple",
    "href": "FCA.html#un-subretículo-simple",
    "title": "Análisis Formal de Contextos",
    "section": "",
    "text": "Dentro de todo el concepto formal, puede ser que nos interese filtrar o eliminar datos que no estén dentro de unos parámetros. Para ello, podemos por ejemplo filtrar por aquellos conceptos que tengan un soporte mayor al 50%.\n\nindices &lt;- which(fc$concepts$support()&gt;0.5)\nsublattice &lt;- fc$concepts$sublattice(indices)\n\nsublattice$print()\n\nA set of 16 concepts:\n1: ({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222}, {})\n2: ({1, 3, 4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 20, 23, 24, 25, 26, 29, 30, 31, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 89, 90, 92, 93, 95, 96, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 113, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 220, 221, 222}, {few_followers})\n3: ({2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 78, 80, 82, 83, 85, 86, 87, 88, 90, 92, 93, 94, 96, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 125, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 173, 174, 175, 176, 180, 181, 184, 185, 186, 187, 188, 189, 190, 193, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222}, {short_fullname.words})\n4: ({3, 4, 6, 7, 10, 11, 13, 16, 17, 19, 23, 24, 26, 30, 31, 37, 38, 40, 41, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 73, 74, 75, 76, 78, 80, 85, 86, 88, 90, 92, 93, 96, 100, 101, 102, 103, 104, 107, 109, 111, 119, 120, 121, 125, 127, 128, 130, 131, 132, 133, 134, 136, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 156, 157, 161, 162, 163, 164, 165, 166, 167, 168, 171, 173, 174, 175, 176, 180, 181, 185, 186, 187, 190, 193, 195, 196, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 216, 217, 218, 220, 221, 222}, {short_fullname.words, few_followers})\n5: ({3, 7, 11, 14, 18, 20, 25, 29, 33, 46, 47, 50, 52, 57, 62, 64, 65, 70, 76, 78, 79, 88, 89, 90, 102, 104, 114, 116, 120, 122, 123, 125, 126, 127, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 173, 175, 176, 179, 181, 183, 184, 187, 188, 189, 190, 192, 193, 194, 195, 197, 198, 200, 205, 207, 208, 209, 212, 214, 215, 218, 219, 220}, {none_description})\n6: ({3, 7, 11, 20, 25, 29, 46, 50, 52, 57, 64, 65, 70, 76, 78, 79, 88, 89, 90, 102, 104, 120, 122, 123, 125, 126, 127, 129, 130, 132, 133, 134, 135, 140, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 166, 169, 170, 171, 172, 173, 175, 176, 179, 181, 183, 187, 190, 192, 193, 194, 195, 198, 200, 205, 207, 208, 209, 212, 214, 218, 220}, {none_description, few_followers})\n7: ({3, 7, 11, 14, 33, 46, 47, 50, 52, 57, 64, 65, 70, 76, 78, 88, 90, 102, 104, 114, 116, 120, 125, 127, 130, 132, 133, 134, 138, 139, 140, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 166, 171, 173, 175, 176, 181, 184, 187, 188, 189, 190, 193, 195, 197, 198, 205, 207, 208, 209, 215, 218, 219, 220}, {none_description, short_fullname.words})\n8: ({3, 7, 11, 46, 50, 52, 57, 64, 65, 70, 76, 78, 88, 90, 102, 104, 120, 125, 127, 130, 132, 133, 134, 140, 142, 143, 144, 145, 146, 147, 151, 153, 154, 156, 157, 161, 162, 163, 164, 166, 171, 173, 175, 176, 181, 187, 190, 193, 195, 198, 205, 207, 208, 209, 218, 220}, {none_description, short_fullname.words, few_followers})\n9: ({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 139, 143, 144, 147, 149, 150, 153, 154, 155, 157, 158, 159, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 190, 191, 194, 195, 196, 197, 198, 202, 203, 204, 205, 206, 207, 208, 210, 213, 216, 221, 222}, {profile.pic})\n10: ({1, 3, 4, 6, 7, 8, 10, 11, 13, 16, 17, 19, 20, 23, 24, 25, 26, 29, 30, 31, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 89, 90, 92, 93, 96, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 113, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 136, 143, 144, 147, 149, 150, 153, 154, 155, 157, 159, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 190, 191, 194, 195, 196, 198, 202, 203, 204, 205, 206, 207, 208, 210, 213, 216, 221, 222}, {profile.pic, few_followers})\n11: ({2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 78, 80, 82, 83, 85, 86, 87, 88, 90, 92, 93, 94, 96, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 125, 127, 128, 130, 136, 139, 143, 144, 147, 149, 150, 153, 154, 157, 158, 164, 165, 166, 167, 171, 173, 174, 175, 176, 180, 181, 185, 190, 195, 196, 197, 198, 202, 204, 205, 206, 207, 208, 210, 213, 216, 221, 222}, {profile.pic, short_fullname.words})\n12: ({3, 4, 6, 7, 10, 11, 13, 16, 17, 19, 23, 24, 26, 30, 31, 37, 38, 40, 41, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 64, 65, 66, 69, 70, 71, 73, 74, 75, 76, 78, 80, 85, 86, 88, 90, 92, 93, 96, 100, 101, 102, 103, 104, 107, 109, 111, 119, 120, 121, 125, 127, 128, 130, 136, 143, 144, 147, 149, 150, 153, 154, 157, 164, 165, 166, 167, 171, 173, 174, 175, 176, 180, 181, 185, 190, 195, 196, 198, 202, 204, 205, 206, 207, 208, 210, 213, 216, 221, 222}, {profile.pic, short_fullname.words, few_followers})\n13: ({3, 7, 11, 14, 18, 20, 25, 29, 33, 46, 47, 50, 52, 57, 62, 64, 65, 70, 76, 78, 79, 88, 89, 90, 102, 104, 114, 116, 120, 122, 123, 125, 126, 127, 129, 130, 135, 139, 143, 144, 147, 153, 154, 155, 157, 158, 159, 164, 166, 169, 170, 171, 172, 173, 175, 176, 181, 190, 194, 195, 197, 198, 205, 207, 208}, {profile.pic, none_description})\n14: ({3, 7, 11, 20, 25, 29, 46, 50, 52, 57, 64, 65, 70, 76, 78, 79, 88, 89, 90, 102, 104, 120, 122, 123, 125, 126, 127, 129, 130, 135, 143, 144, 147, 153, 154, 155, 157, 159, 164, 166, 169, 170, 171, 172, 173, 175, 176, 181, 190, 194, 195, 198, 205, 207, 208}, {profile.pic, none_description, few_followers})\n15: ({3, 7, 11, 14, 33, 46, 47, 50, 52, 57, 64, 65, 70, 76, 78, 88, 90, 102, 104, 114, 116, 120, 125, 127, 130, 139, 143, 144, 147, 153, 154, 157, 158, 164, 166, 171, 173, 175, 176, 181, 190, 195, 197, 198, 205, 207, 208}, {profile.pic, none_description, short_fullname.words})\n16: ({3, 7, 11, 46, 50, 52, 57, 64, 65, 70, 76, 78, 88, 90, 102, 104, 120, 125, 127, 130, 143, 144, 147, 153, 154, 157, 164, 166, 171, 173, 175, 176, 181, 190, 195, 198, 205, 207, 208}, {profile.pic, none_description, short_fullname.words, few_followers})\n\n\n\n# Lo visualizamos\nsublattice$plot()"
  },
  {
    "objectID": "FCA.html#qué-atributos-tiene-una-cuenta-falsa",
    "href": "FCA.html#qué-atributos-tiene-una-cuenta-falsa",
    "title": "Análisis Formal de Contextos",
    "section": "",
    "text": "Otra operación interesante que podemos realizar es la de crear distintos sets y obtener información a partir de ellos.\n\n# Defino un set con cuentas falsas\nSfake &lt;- Set$new(attributes = fc$attributes)\nSfake$assign(fake = 1)\nSfake\n\n{fake}\n\n\nCon el método extent podemos obtener el conjunto de atributos que contienen las características del set que hemos especificado.\n\nfc$extent(Sfake)\n\n{289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304,\n  305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319,\n  320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334,\n  335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,\n  350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364,\n  365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379,\n  380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394,\n  395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409,\n  410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424,\n  425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439,\n  440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,\n  455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469,\n  470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484,\n  485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499,\n  500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514,\n  515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529,\n  530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544,\n  545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559,\n  560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574,\n  575, 576}\n\n\nTambién podemos obtener los atributos que tienen en común con intent.\n\nfc$intent(Sfake)\n\n{profile.pic, name..username, external.URL, private, fake, none_description,\n  short_description, medium_description, long_description, none_fullname.words,\n  short_fullname.words, medium_fullname.words, long_fullname.words, none_posts,\n  few_posts, regular_posts, lots_posts, none_followers, few_followers,\n  regular_followers, lots_followers, none_follows, few_follows, regular_follows,\n  lots_follows}"
  },
  {
    "objectID": "analisis_exploratorio.html",
    "href": "analisis_exploratorio.html",
    "title": "Análisis exploratorio de datos",
    "section": "",
    "text": "El análisis exploratorio de datos es un paso fundamental a la hora de trabajar con cualquier conjunto de datos, pues nos permite comprender el tipo de información que queremos extraer de ellos y nos da una visión general de las herramientas que nos serán convenientes utilizar en los pasos posteriores.\nPara empezar, tenemos dos ficheros csv, que corresponden al training set y testing set, respectivamente. Para este paso comenzaremos a utilizar el primero, pues simplemente queremos observar de forma general su contenido.\n\n# Librerías\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(Amelia)\n\n\n\n\ndata &lt;- read.csv(\"train.csv\")\nhead(data)\n\n  profile.pic nums.length.username fullname.words nums.length.fullname\n1           1                 0.27              0                    0\n2           1                 0.00              2                    0\n3           1                 0.10              2                    0\n4           1                 0.00              1                    0\n5           1                 0.00              2                    0\n6           1                 0.00              4                    0\n  name..username description.length external.URL private X.posts X.followers\n1              0                 53            0       0      32        1000\n2              0                 44            0       0     286        2740\n3              0                  0            0       1      13         159\n4              0                 82            0       0     679         414\n5              0                  0            0       1       6         151\n6              0                 81            1       0     344      669987\n  X.follows fake\n1       955    0\n2       533    0\n3        98    0\n4       651    0\n5       126    0\n6       150    0\n\n\nEl dataset está compuesto por 12 columnas, detallando información como si la cuenta es privada, si tiene foto de perfil y si dicha cuenta es falsa.\n\n# Tamaño del dataset\ndim(data)\n\n[1] 576  12\n\n\n\nstr(data)\n\n'data.frame':   576 obs. of  12 variables:\n $ profile.pic         : int  1 1 1 1 1 1 1 1 1 1 ...\n $ nums.length.username: num  0.27 0 0.1 0 0 0 0 0 0 0 ...\n $ fullname.words      : int  0 2 2 1 2 4 2 2 0 2 ...\n $ nums.length.fullname: num  0 0 0 0 0 0 0 0 0 0 ...\n $ name..username      : int  0 0 0 0 0 0 0 0 0 0 ...\n $ description.length  : int  53 44 0 82 0 81 50 0 71 40 ...\n $ external.URL        : int  0 0 0 0 0 1 0 0 0 1 ...\n $ private             : int  0 0 1 0 1 0 0 0 0 0 ...\n $ X.posts             : int  32 286 13 679 6 344 16 33 72 213 ...\n $ X.followers         : int  1000 2740 159 414 151 669987 122 1078 1824 12945 ...\n $ X.follows           : int  955 533 98 651 126 150 177 76 2713 813 ...\n $ fake                : int  0 0 0 0 0 0 0 0 0 0 ...\n\n\nTodos los datos son de algún tipo numérico, pero será interesante pasar algunas de estas columnas a factores (especialmente aquellas que toman una serie de valores fijos).\n\n# Convertimos en factor\ndata$profile.pic &lt;- data$profile.pic %&gt;% as.factor()\ndata$external.URL &lt;- data$external.URL %&gt;% as.factor()\ndata$private &lt;- data$private %&gt;% as.factor()\ndata$fake &lt;- data$fake %&gt;% as.factor()\n\nVeamos un resumen estadístico de las variables.\n\nsummary(data)\n\n profile.pic nums.length.username fullname.words  nums.length.fullname\n 0:172       Min.   :0.0000       Min.   : 0.00   Min.   :0.00000     \n 1:404       1st Qu.:0.0000       1st Qu.: 1.00   1st Qu.:0.00000     \n             Median :0.0000       Median : 1.00   Median :0.00000     \n             Mean   :0.1638       Mean   : 1.46   Mean   :0.03609     \n             3rd Qu.:0.3100       3rd Qu.: 2.00   3rd Qu.:0.00000     \n             Max.   :0.9200       Max.   :12.00   Max.   :1.00000     \n name..username    description.length external.URL private    X.posts      \n Min.   :0.00000   Min.   :  0.00     0:509        0:356   Min.   :   0.0  \n 1st Qu.:0.00000   1st Qu.:  0.00     1: 67        1:220   1st Qu.:   0.0  \n Median :0.00000   Median :  0.00                          Median :   9.0  \n Mean   :0.03472   Mean   : 22.62                          Mean   : 107.5  \n 3rd Qu.:0.00000   3rd Qu.: 34.00                          3rd Qu.:  81.5  \n Max.   :1.00000   Max.   :150.00                          Max.   :7389.0  \n  X.followers         X.follows      fake   \n Min.   :       0   Min.   :   0.0   0:288  \n 1st Qu.:      39   1st Qu.:  57.5   1:288  \n Median :     150   Median : 229.5          \n Mean   :   85307   Mean   : 508.4          \n 3rd Qu.:     716   3rd Qu.: 589.5          \n Max.   :15338538   Max.   :7500.0          \n\n\nTambién es importante saber si hay información faltante en el dataset, pues habría que decidir si eliminar esas filas o buscar alguna alternativa. Para ello, vamos a visualizar cuantas celdas hay a null.\n\n# Función de libreria Amelia\nmissmap(data)\n\n\n\n\nPor suerte, no tenemos que gestionar los valores nulos, pues no existe ninguno.\n\n# Número de cuentas falsas\nsum(data$fake==1)\n\n[1] 288\n\n\n\n\n\nIntuitivamente, es razonable pensar que la mayoría de cuentas falsas serán aquellas con un número muy bajo de seguidores. Veamos si esto es cierto.\n\n# Cuentas falsas con menos seguidores que la media\nfake_followers &lt;- data %&gt;% \n  filter(data$fake==1 & data$X.followers&lt;mean(data$X.followers))\n\ndim(fake_followers)[1]\n\n[1] 288\n\n\nEsto ya nos da algunas ideas interesantes, pues hemos comprobado que TODAS las cuentas falsas tienen un número de seguidores inferior a la media.\nOtra característica propia de las cuentas falsas es que tengan poca o ninguna información, por lo que es probable que la mayoría no tengan foto de perfil o descripción.\n\n# Cuentas falsas sin foto de perfil ó descripción\nlength(which(data$fake==1 & (data$profile.pic==0 | data$description.length==0)))\n\n[1] 255\n\n\n\n# Cantidad de cuentas que son falsas en función de si son públicas o privadas\ndata %&gt;%\n  group_by(fake, private) %&gt;%\n  summarise(cantidad=n())\n\n`summarise()` has grouped output by 'fake'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4 × 3\n# Groups:   fake [2]\n  fake  private cantidad\n  &lt;fct&gt; &lt;fct&gt;      &lt;int&gt;\n1 0     0            174\n2 0     1            114\n3 1     0            182\n4 1     1            106\n\n\nVemos que dentro de las cuentas que son privadas o no, hay una distribución uniforme de las cuentas falsas. Por tanto, esta columna es probable que no nos aporte mucha información en futuros modelos.\n\n# Cantidad de cuentas que son falsas en función de si tienen foto de perfil o no\ndata %&gt;%\n  group_by(fake, profile.pic) %&gt;%\n  summarise(cantidad=n())\n\n`summarise()` has grouped output by 'fake'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4 × 3\n# Groups:   fake [2]\n  fake  profile.pic cantidad\n  &lt;fct&gt; &lt;fct&gt;          &lt;int&gt;\n1 0     0                  2\n2 0     1                286\n3 1     0                170\n4 1     1                118\n\n\nLa gran mayoría de cuentas reales poseen foto de perfil.\n\n# Cuentas falsas con URL\nlength(which(data$external.URL==1 & data$fake==1))\n\n[1] 0\n\n\nAlgunas conclusiones que obtenemos es que todas las cuentas falsas tienen pocos seguidores, no tienen URL y tampoco suelen tener foto de perfil ni descripción. Esto nos ayudará a lo largo del proyecto a focalizar nuestra atención en los atributos que más información nos dan sobre cada cuenta.\nPara profundizar más en todo esto, será interesante estudiar estos datos de forma visual, que es lo que se hará en el siguiente capítulo."
  },
  {
    "objectID": "analisis_exploratorio.html#conociendo-los-datos",
    "href": "analisis_exploratorio.html#conociendo-los-datos",
    "title": "Análisis exploratorio de datos",
    "section": "",
    "text": "data &lt;- read.csv(\"train.csv\")\nhead(data)\n\n  profile.pic nums.length.username fullname.words nums.length.fullname\n1           1                 0.27              0                    0\n2           1                 0.00              2                    0\n3           1                 0.10              2                    0\n4           1                 0.00              1                    0\n5           1                 0.00              2                    0\n6           1                 0.00              4                    0\n  name..username description.length external.URL private X.posts X.followers\n1              0                 53            0       0      32        1000\n2              0                 44            0       0     286        2740\n3              0                  0            0       1      13         159\n4              0                 82            0       0     679         414\n5              0                  0            0       1       6         151\n6              0                 81            1       0     344      669987\n  X.follows fake\n1       955    0\n2       533    0\n3        98    0\n4       651    0\n5       126    0\n6       150    0\n\n\nEl dataset está compuesto por 12 columnas, detallando información como si la cuenta es privada, si tiene foto de perfil y si dicha cuenta es falsa.\n\n# Tamaño del dataset\ndim(data)\n\n[1] 576  12\n\n\n\nstr(data)\n\n'data.frame':   576 obs. of  12 variables:\n $ profile.pic         : int  1 1 1 1 1 1 1 1 1 1 ...\n $ nums.length.username: num  0.27 0 0.1 0 0 0 0 0 0 0 ...\n $ fullname.words      : int  0 2 2 1 2 4 2 2 0 2 ...\n $ nums.length.fullname: num  0 0 0 0 0 0 0 0 0 0 ...\n $ name..username      : int  0 0 0 0 0 0 0 0 0 0 ...\n $ description.length  : int  53 44 0 82 0 81 50 0 71 40 ...\n $ external.URL        : int  0 0 0 0 0 1 0 0 0 1 ...\n $ private             : int  0 0 1 0 1 0 0 0 0 0 ...\n $ X.posts             : int  32 286 13 679 6 344 16 33 72 213 ...\n $ X.followers         : int  1000 2740 159 414 151 669987 122 1078 1824 12945 ...\n $ X.follows           : int  955 533 98 651 126 150 177 76 2713 813 ...\n $ fake                : int  0 0 0 0 0 0 0 0 0 0 ...\n\n\nTodos los datos son de algún tipo numérico, pero será interesante pasar algunas de estas columnas a factores (especialmente aquellas que toman una serie de valores fijos).\n\n# Convertimos en factor\ndata$profile.pic &lt;- data$profile.pic %&gt;% as.factor()\ndata$external.URL &lt;- data$external.URL %&gt;% as.factor()\ndata$private &lt;- data$private %&gt;% as.factor()\ndata$fake &lt;- data$fake %&gt;% as.factor()\n\nVeamos un resumen estadístico de las variables.\n\nsummary(data)\n\n profile.pic nums.length.username fullname.words  nums.length.fullname\n 0:172       Min.   :0.0000       Min.   : 0.00   Min.   :0.00000     \n 1:404       1st Qu.:0.0000       1st Qu.: 1.00   1st Qu.:0.00000     \n             Median :0.0000       Median : 1.00   Median :0.00000     \n             Mean   :0.1638       Mean   : 1.46   Mean   :0.03609     \n             3rd Qu.:0.3100       3rd Qu.: 2.00   3rd Qu.:0.00000     \n             Max.   :0.9200       Max.   :12.00   Max.   :1.00000     \n name..username    description.length external.URL private    X.posts      \n Min.   :0.00000   Min.   :  0.00     0:509        0:356   Min.   :   0.0  \n 1st Qu.:0.00000   1st Qu.:  0.00     1: 67        1:220   1st Qu.:   0.0  \n Median :0.00000   Median :  0.00                          Median :   9.0  \n Mean   :0.03472   Mean   : 22.62                          Mean   : 107.5  \n 3rd Qu.:0.00000   3rd Qu.: 34.00                          3rd Qu.:  81.5  \n Max.   :1.00000   Max.   :150.00                          Max.   :7389.0  \n  X.followers         X.follows      fake   \n Min.   :       0   Min.   :   0.0   0:288  \n 1st Qu.:      39   1st Qu.:  57.5   1:288  \n Median :     150   Median : 229.5          \n Mean   :   85307   Mean   : 508.4          \n 3rd Qu.:     716   3rd Qu.: 589.5          \n Max.   :15338538   Max.   :7500.0          \n\n\nTambién es importante saber si hay información faltante en el dataset, pues habría que decidir si eliminar esas filas o buscar alguna alternativa. Para ello, vamos a visualizar cuantas celdas hay a null.\n\n# Función de libreria Amelia\nmissmap(data)\n\n\n\n\nPor suerte, no tenemos que gestionar los valores nulos, pues no existe ninguno.\n\n# Número de cuentas falsas\nsum(data$fake==1)\n\n[1] 288"
  },
  {
    "objectID": "analisis_exploratorio.html#qué-características-tiene-una-cuenta-falsa",
    "href": "analisis_exploratorio.html#qué-características-tiene-una-cuenta-falsa",
    "title": "Análisis exploratorio de datos",
    "section": "",
    "text": "Intuitivamente, es razonable pensar que la mayoría de cuentas falsas serán aquellas con un número muy bajo de seguidores. Veamos si esto es cierto.\n\n# Cuentas falsas con menos seguidores que la media\nfake_followers &lt;- data %&gt;% \n  filter(data$fake==1 & data$X.followers&lt;mean(data$X.followers))\n\ndim(fake_followers)[1]\n\n[1] 288\n\n\nEsto ya nos da algunas ideas interesantes, pues hemos comprobado que TODAS las cuentas falsas tienen un número de seguidores inferior a la media.\nOtra característica propia de las cuentas falsas es que tengan poca o ninguna información, por lo que es probable que la mayoría no tengan foto de perfil o descripción.\n\n# Cuentas falsas sin foto de perfil ó descripción\nlength(which(data$fake==1 & (data$profile.pic==0 | data$description.length==0)))\n\n[1] 255\n\n\n\n# Cantidad de cuentas que son falsas en función de si son públicas o privadas\ndata %&gt;%\n  group_by(fake, private) %&gt;%\n  summarise(cantidad=n())\n\n`summarise()` has grouped output by 'fake'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4 × 3\n# Groups:   fake [2]\n  fake  private cantidad\n  &lt;fct&gt; &lt;fct&gt;      &lt;int&gt;\n1 0     0            174\n2 0     1            114\n3 1     0            182\n4 1     1            106\n\n\nVemos que dentro de las cuentas que son privadas o no, hay una distribución uniforme de las cuentas falsas. Por tanto, esta columna es probable que no nos aporte mucha información en futuros modelos.\n\n# Cantidad de cuentas que son falsas en función de si tienen foto de perfil o no\ndata %&gt;%\n  group_by(fake, profile.pic) %&gt;%\n  summarise(cantidad=n())\n\n`summarise()` has grouped output by 'fake'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4 × 3\n# Groups:   fake [2]\n  fake  profile.pic cantidad\n  &lt;fct&gt; &lt;fct&gt;          &lt;int&gt;\n1 0     0                  2\n2 0     1                286\n3 1     0                170\n4 1     1                118\n\n\nLa gran mayoría de cuentas reales poseen foto de perfil.\n\n# Cuentas falsas con URL\nlength(which(data$external.URL==1 & data$fake==1))\n\n[1] 0\n\n\nAlgunas conclusiones que obtenemos es que todas las cuentas falsas tienen pocos seguidores, no tienen URL y tampoco suelen tener foto de perfil ni descripción. Esto nos ayudará a lo largo del proyecto a focalizar nuestra atención en los atributos que más información nos dan sobre cada cuenta.\nPara profundizar más en todo esto, será interesante estudiar estos datos de forma visual, que es lo que se hará en el siguiente capítulo."
  },
  {
    "objectID": "series_temporales.html",
    "href": "series_temporales.html",
    "title": "Series Temporales",
    "section": "",
    "text": "La siguiente técnica a estudiar son las Series Temporales, que suele ser interesante para ver cómo avanzan temporalmente ciertos parámetros y tratar de realizar predicciones de cara al futuro.\n\n# Librerias\nlibrary(TTR)\nlibrary(forecast)\nlibrary(tseries)\nlibrary(dplyr)\n\n\n\nComo en nuestro conjunto de datos no tenemos ningún indicador de temporalidad, vamos a crear un caso ficticio:\nSupongamos que queremos ver la popularidad que ha ganado Instagram en el último año. Lo que haremos será asumir que la información que contiene nuestro dataset es sobre todas las cuentas que se han registrado en 2023.\nVamos a tratar de estudiar, pues, cuántos usuarios se unieron cada mes, cuánta actividad han ido teniendo, etc.\nPara ello, voy a añadir tres columnas más al dataset:\n\nFecha en la que se unieron a Instagram.\nMes que ganaron más seguidores y su cantidad.\n\nEstos valores voy a generarlos aleatoriamente.\n\n\n\ndata_ts &lt;- read.csv(\"train.csv\")\nattach(data_ts)\n\n\n# Creo una secuencia de fechas desde enero de 2023 hasta diciembre de ese mismo año\nfechas &lt;- seq.Date(as.Date(\"2023-01-01\"), as.Date(\"2023-12-31\"), by = \"day\")\n\n# Le doy a cada fila una fecha\nset.seed(12)\ndata_ts &lt;- data_ts %&gt;%\n  mutate(creation.date = sample(fechas, nrow(data_ts), replace = TRUE))\n\n\n# Compruebo que se ha insertado correctamente\nstr(data_ts$creation.date)\n\n Date[1:576], format: \"2023-12-12\" \"2023-12-02\" \"2023-09-04\" \"2023-12-13\" \"2023-06-23\" ...\n\n\nPosteriormente, voy a crear una lista que contengan para cada mes el número de personas que se unieron.\n\nusuarios_por_meses &lt;- data_ts %&gt;%\n  group_by(Month = as.integer(format(creation.date, \"%m\"))) %&gt;%\n  summarise(users_joined = n())\n\nusuarios_por_meses\n\n# A tibble: 12 × 2\n   Month users_joined\n   &lt;int&gt;        &lt;int&gt;\n 1     1           38\n 2     2           37\n 3     3           47\n 4     4           46\n 5     5           52\n 6     6           58\n 7     7           53\n 8     8           49\n 9     9           44\n10    10           55\n11    11           48\n12    12           49\n\n\n\n\n\nEn este caso, no me basta con asignarle una fecha aleatoria, pues debo de asegurarme de que este mes no sea anterior al de creación de la cuenta. Para ello, indico en sample que el primer valor válido es la fecha de creación.\n\ndata_ts &lt;- data_ts %&gt;%\n  rowwise() %&gt;%\n  mutate(date_max_followers = as.Date(sample(seq(creation.date, as.Date(\"2023-12-31\"), by=\"day\"), 1)))\n\n\ndata_ts &lt;- data_ts %&gt;%\n  rowwise() %&gt;%\n  mutate(max_followers = sample(1:X.followers, 1))\n\nTambién vamos a calcular la cantidad de seguidores total de cada mes. Esto será útil para estudiar la actividad mensual de los usuarios en general, pues que el número de nuevos seguidores sea alta es indicador de que hay muchos usuarios interactuando con otras cuentas.\n\nmax_usuarios_por_meses &lt;- data_ts %&gt;%\n  group_by(Month = as.integer(format(date_max_followers, \"%m\"))) %&gt;%\n  summarise(max_followers = sum(max_followers))\n\nmax_usuarios_por_meses\n\n# A tibble: 12 × 2\n   Month max_followers\n   &lt;int&gt;         &lt;int&gt;\n 1     1            29\n 2     2           739\n 3     3       5381856\n 4     4           804\n 5     5        232530\n 6     6       3959113\n 7     7        160658\n 8     8         21936\n 9     9         26709\n10    10        627543\n11    11       1350470\n12    12       4166074\n\n\n\n\n\n\nLo primero que podemos observar es el número de usuarios que se registraron mensualmente.\n\nts1&lt;-  ts(usuarios_por_meses[2], frequency=12, start=c(2023, 1))\nts1\n\n     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n2023  38  37  47  46  52  58  53  49  44  55  48  49\n\n\n\nplot.ts(ts1)\n\n\n\n\nEs fácil observar que no hay estacionalidad en esta serie. En el caso de que no se apreciase a simple vista, podríamos utilizar el test ADF.\n\nadf_test &lt;- adf.test(ts1)\nif (adf_test$p.value &lt; 0.05) {\n  cat(\"The time series is stationary.\\n\")\n  print(adf_test)\n} else {\n  cat(\"The time series is not stationary. You may need to difference it.\\n\")\n}\n\nThe time series is not stationary. You may need to difference it.\n\n\n\naggregate(ts1)\n\nTime Series:\nStart = 2023 \nEnd = 2023 \nFrequency = 1 \n     users_joined\n[1,]          576\n\n\n\n\nPara ver si existe alguna tendencia en la serie, vamos a proceder a descomponerla.\n\n# Aplicando SMA\nts1.sma2 &lt;- SMA(ts1, n = 2)\nts1.sma5 &lt;- SMA(ts1, n = 5)\nts1.sma9 &lt;- SMA(ts1, n = 9)\n\n# Plot de las series\npar(mfrow = c(2, 2))\nplot.ts(ts1)\nplot.ts(ts1.sma2)\nplot.ts(ts1.sma5)\nplot.ts(ts1.sma9)\n\n\n\n\nCon esto hemos conseguido apreciar cierta tendencia ascendente en la serie, principalmente a partir del SMA5.\n\n\n\n\nholt &lt;- HoltWinters(ts1, beta = FALSE, gamma = FALSE)\nholt\n\nHolt-Winters exponential smoothing without trend and without seasonal component.\n\nCall:\nHoltWinters(x = ts1, beta = FALSE, gamma = FALSE)\n\nSmoothing parameters:\n alpha: 0.7102409\n beta : FALSE\n gamma: FALSE\n\nCoefficients:\n      [,1]\na 49.07538\n\n\nDe estos resultados, nos interesa comprender el valor de alpha que, al ser de 0.71, nos dice que las observaciones pasadas no tienen una influencia excesivamente significativa en las predicciones.\n\nplot(holt)\n\n\n\n\nCon el uso de la función forecast podemos ver las predicciones para los próximos años que obtenemos con este modelo.\n\nplot(forecast(holt))\n\n\n\n\n\n# Suma residual de cuadrados\nholt$SSE\n\n[1] 377.1806\n\n\n\n\n\nTambién podemos tratar de crear un modelo con ARIMA para predecir cómo avanzarán estos valores durante el próximo año.\n\n# Creo el modelo\nmodel &lt;- arima(ts1, order = c(0, 0, 20))\nsummary(model)\n\n\nCall:\narima(x = ts1, order = c(0, 0, 20))\n\nCoefficients:\n         ma1     ma2     ma3      ma4      ma5      ma6     ma7      ma8\n      0.5179  0.3978  0.0848  -0.4843  -0.9476  -1.3051  0.3649  -0.1508\ns.e.  3.7678  2.3737  3.6455   3.0056   2.0156   4.7509  1.2459   2.5796\n         ma9     ma10    ma11     ma12     ma13    ma14    ma15    ma16\n      0.0475  -0.0994  0.1538  -0.0392  -0.2088  1.3536  0.8391  0.5430\ns.e.  2.8580   3.5001  3.4184   4.0549   4.0401  3.6190  2.4645  1.7683\n         ma17     ma18     ma19     ma20  intercept\n      -0.2427  -0.2742  -0.6742  -0.8760    47.9542\ns.e.   2.0186   2.1474   1.9061   3.6936     0.9154\n\nsigma^2 estimated as 2.969:  log likelihood = -33.02,  aic = 110.04\n\nTraining set error measures:\n                     ME    RMSE      MAE        MPE     MAPE      MASE\nTraining set -0.2630437 1.72295 1.388404 -0.9736737 3.063273 0.2679377\n                    ACF1\nTraining set -0.06147511\n\n\n\n# Hago las predicciones para los próximos 12 meses\nforecast_usuarios_registrados &lt;- forecast::forecast(model, level=c(95), h=12)\nplot(forecast_usuarios_registrados)\n\n\n\n\n\n# Media por meses de usuarios que se estima que se registrarán\nforecast_usuarios_registrados$mean\n\n          Jan      Feb      Mar      Apr      May      Jun      Jul      Aug\n2024 49.64213 45.70380 42.23315 38.15777 49.72670 47.06028 49.98531 50.57037\n          Sep      Oct      Nov      Dec\n2024 50.85841 48.87311 45.58468 50.27945\n\n\n\n# Residuos\nforecast_usuarios_registrados$residuals\n\n            Jan        Feb        Mar        Apr        May        Jun\n2023 -3.3760871 -2.4692735  1.3524180 -1.3727414  0.5396656  2.2778460\n            Jul        Aug        Sep        Oct        Nov        Dec\n2023 -0.7143588 -0.1864591 -1.1825920  2.5822336 -0.5665106 -0.0406656\n\n\n\ntsdisplay(residuals(model), main = \"Seasonal Model Residuals\")\n\n\n\n\n\n\n\n\nTambién puede ser interesante estudiar cómo han ido interactuando estos usuarios durante los meses. Para ello, podemos ver que si ha habido mucho aumento en los números de seguidores, la actividad ha sido mayor.\n\nts2 &lt;-  ts(max_usuarios_por_meses[2], frequency=12, start=c(2023, 1))\nts2\n\n         Jan     Feb     Mar     Apr     May     Jun     Jul     Aug     Sep\n2023      29     739 5381856     804  232530 3959113  160658   21936   26709\n         Oct     Nov     Dec\n2023  627543 1350470 4166074\n\n\n\nplot.ts(ts2)\n\n\n\n\n\n\nYa hemos visto que el modelo ARIMA nos proporciona mejores resultados, por lo que será el que utilicemos para esta serie.\n\n# Creo el modelo\nmodel2 &lt;- arima(ts2, order = c(0, 0, 20))\nsummary(model2)\n\n\nCall:\narima(x = ts2, order = c(0, 0, 20))\n\nCoefficients:\n          ma1      ma2     ma3      ma4     ma5      ma6      ma7     ma8\n      -0.8568  -0.5056  0.6206  -0.8640  0.5618  -0.0159  -0.2195  1.0064\ns.e.   1.4554   1.9685  1.6826   1.2115  1.5767   1.5556   1.6877  1.9266\n         ma9     ma10     ma11    ma12     ma13    ma14    ma15     ma16\n      0.3442  -0.9977  -0.6680  0.7599  -0.6122  0.2437  0.4635  -0.5355\ns.e.  1.6661   1.3751   1.8677  1.2994   1.4443  1.9772  1.9571   1.5579\n        ma17     ma18     ma19    ma20  intercept\n      1.0273  -0.1439  -0.8968  0.2904  1203218.6\ns.e.  1.5912   1.8637   1.5525  1.2430    55986.4\n\nsigma^2 estimated as 2.896e+11:  log likelihood = -184.25,  aic = 412.5\n\nTraining set error measures:\n                   ME     RMSE      MAE       MPE     MAPE      MASE\nTraining set 108963.6 538181.7 451221.6 -116739.2 120273.6 0.2176707\n                      ACF1\nTraining set -0.0001858907\n\n\n\n# Hago las predicciones para los próximos 12 meses\nforecast_actividad &lt;- forecast::forecast(model2, level=c(95), h=12)\nplot(forecast_actividad)\n\n\n\n\nSegún estas predicciones, la actividad no será tan elevada durante el año 2024, aunque sufrirá menos desviaciones que en el año anterior.\n\n\n\n\nComo consideraciones finales, es importante tener en cuenta que series temporales es más adecuado para conjuntos de datos con otras características. Sin embargo, esta exploración nos ha permitido comprobar su enorme utilidad y la amplitud de información que se puede extraer con ellas."
  },
  {
    "objectID": "series_temporales.html#añadir-valores-temporales",
    "href": "series_temporales.html#añadir-valores-temporales",
    "title": "Series Temporales",
    "section": "",
    "text": "Como en nuestro conjunto de datos no tenemos ningún indicador de temporalidad, vamos a crear un caso ficticio:\nSupongamos que queremos ver la popularidad que ha ganado Instagram en el último año. Lo que haremos será asumir que la información que contiene nuestro dataset es sobre todas las cuentas que se han registrado en 2023.\nVamos a tratar de estudiar, pues, cuántos usuarios se unieron cada mes, cuánta actividad han ido teniendo, etc.\nPara ello, voy a añadir tres columnas más al dataset:\n\nFecha en la que se unieron a Instagram.\nMes que ganaron más seguidores y su cantidad.\n\nEstos valores voy a generarlos aleatoriamente.\n\n\n\ndata_ts &lt;- read.csv(\"train.csv\")\nattach(data_ts)\n\n\n# Creo una secuencia de fechas desde enero de 2023 hasta diciembre de ese mismo año\nfechas &lt;- seq.Date(as.Date(\"2023-01-01\"), as.Date(\"2023-12-31\"), by = \"day\")\n\n# Le doy a cada fila una fecha\nset.seed(12)\ndata_ts &lt;- data_ts %&gt;%\n  mutate(creation.date = sample(fechas, nrow(data_ts), replace = TRUE))\n\n\n# Compruebo que se ha insertado correctamente\nstr(data_ts$creation.date)\n\n Date[1:576], format: \"2023-12-12\" \"2023-12-02\" \"2023-09-04\" \"2023-12-13\" \"2023-06-23\" ...\n\n\nPosteriormente, voy a crear una lista que contengan para cada mes el número de personas que se unieron.\n\nusuarios_por_meses &lt;- data_ts %&gt;%\n  group_by(Month = as.integer(format(creation.date, \"%m\"))) %&gt;%\n  summarise(users_joined = n())\n\nusuarios_por_meses\n\n# A tibble: 12 × 2\n   Month users_joined\n   &lt;int&gt;        &lt;int&gt;\n 1     1           38\n 2     2           37\n 3     3           47\n 4     4           46\n 5     5           52\n 6     6           58\n 7     7           53\n 8     8           49\n 9     9           44\n10    10           55\n11    11           48\n12    12           49\n\n\n\n\n\nEn este caso, no me basta con asignarle una fecha aleatoria, pues debo de asegurarme de que este mes no sea anterior al de creación de la cuenta. Para ello, indico en sample que el primer valor válido es la fecha de creación.\n\ndata_ts &lt;- data_ts %&gt;%\n  rowwise() %&gt;%\n  mutate(date_max_followers = as.Date(sample(seq(creation.date, as.Date(\"2023-12-31\"), by=\"day\"), 1)))\n\n\ndata_ts &lt;- data_ts %&gt;%\n  rowwise() %&gt;%\n  mutate(max_followers = sample(1:X.followers, 1))\n\nTambién vamos a calcular la cantidad de seguidores total de cada mes. Esto será útil para estudiar la actividad mensual de los usuarios en general, pues que el número de nuevos seguidores sea alta es indicador de que hay muchos usuarios interactuando con otras cuentas.\n\nmax_usuarios_por_meses &lt;- data_ts %&gt;%\n  group_by(Month = as.integer(format(date_max_followers, \"%m\"))) %&gt;%\n  summarise(max_followers = sum(max_followers))\n\nmax_usuarios_por_meses\n\n# A tibble: 12 × 2\n   Month max_followers\n   &lt;int&gt;         &lt;int&gt;\n 1     1            29\n 2     2           739\n 3     3       5381856\n 4     4           804\n 5     5        232530\n 6     6       3959113\n 7     7        160658\n 8     8         21936\n 9     9         26709\n10    10        627543\n11    11       1350470\n12    12       4166074"
  },
  {
    "objectID": "series_temporales.html#cantidad-de-usuarios-registrados",
    "href": "series_temporales.html#cantidad-de-usuarios-registrados",
    "title": "Series Temporales",
    "section": "",
    "text": "Lo primero que podemos observar es el número de usuarios que se registraron mensualmente.\n\nts1&lt;-  ts(usuarios_por_meses[2], frequency=12, start=c(2023, 1))\nts1\n\n     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n2023  38  37  47  46  52  58  53  49  44  55  48  49\n\n\n\nplot.ts(ts1)\n\n\n\n\nEs fácil observar que no hay estacionalidad en esta serie. En el caso de que no se apreciase a simple vista, podríamos utilizar el test ADF.\n\nadf_test &lt;- adf.test(ts1)\nif (adf_test$p.value &lt; 0.05) {\n  cat(\"The time series is stationary.\\n\")\n  print(adf_test)\n} else {\n  cat(\"The time series is not stationary. You may need to difference it.\\n\")\n}\n\nThe time series is not stationary. You may need to difference it.\n\n\n\naggregate(ts1)\n\nTime Series:\nStart = 2023 \nEnd = 2023 \nFrequency = 1 \n     users_joined\n[1,]          576\n\n\n\n\nPara ver si existe alguna tendencia en la serie, vamos a proceder a descomponerla.\n\n# Aplicando SMA\nts1.sma2 &lt;- SMA(ts1, n = 2)\nts1.sma5 &lt;- SMA(ts1, n = 5)\nts1.sma9 &lt;- SMA(ts1, n = 9)\n\n# Plot de las series\npar(mfrow = c(2, 2))\nplot.ts(ts1)\nplot.ts(ts1.sma2)\nplot.ts(ts1.sma5)\nplot.ts(ts1.sma9)\n\n\n\n\nCon esto hemos conseguido apreciar cierta tendencia ascendente en la serie, principalmente a partir del SMA5.\n\n\n\n\nholt &lt;- HoltWinters(ts1, beta = FALSE, gamma = FALSE)\nholt\n\nHolt-Winters exponential smoothing without trend and without seasonal component.\n\nCall:\nHoltWinters(x = ts1, beta = FALSE, gamma = FALSE)\n\nSmoothing parameters:\n alpha: 0.7102409\n beta : FALSE\n gamma: FALSE\n\nCoefficients:\n      [,1]\na 49.07538\n\n\nDe estos resultados, nos interesa comprender el valor de alpha que, al ser de 0.71, nos dice que las observaciones pasadas no tienen una influencia excesivamente significativa en las predicciones.\n\nplot(holt)\n\n\n\n\nCon el uso de la función forecast podemos ver las predicciones para los próximos años que obtenemos con este modelo.\n\nplot(forecast(holt))\n\n\n\n\n\n# Suma residual de cuadrados\nholt$SSE\n\n[1] 377.1806\n\n\n\n\n\nTambién podemos tratar de crear un modelo con ARIMA para predecir cómo avanzarán estos valores durante el próximo año.\n\n# Creo el modelo\nmodel &lt;- arima(ts1, order = c(0, 0, 20))\nsummary(model)\n\n\nCall:\narima(x = ts1, order = c(0, 0, 20))\n\nCoefficients:\n         ma1     ma2     ma3      ma4      ma5      ma6     ma7      ma8\n      0.5179  0.3978  0.0848  -0.4843  -0.9476  -1.3051  0.3649  -0.1508\ns.e.  3.7678  2.3737  3.6455   3.0056   2.0156   4.7509  1.2459   2.5796\n         ma9     ma10    ma11     ma12     ma13    ma14    ma15    ma16\n      0.0475  -0.0994  0.1538  -0.0392  -0.2088  1.3536  0.8391  0.5430\ns.e.  2.8580   3.5001  3.4184   4.0549   4.0401  3.6190  2.4645  1.7683\n         ma17     ma18     ma19     ma20  intercept\n      -0.2427  -0.2742  -0.6742  -0.8760    47.9542\ns.e.   2.0186   2.1474   1.9061   3.6936     0.9154\n\nsigma^2 estimated as 2.969:  log likelihood = -33.02,  aic = 110.04\n\nTraining set error measures:\n                     ME    RMSE      MAE        MPE     MAPE      MASE\nTraining set -0.2630437 1.72295 1.388404 -0.9736737 3.063273 0.2679377\n                    ACF1\nTraining set -0.06147511\n\n\n\n# Hago las predicciones para los próximos 12 meses\nforecast_usuarios_registrados &lt;- forecast::forecast(model, level=c(95), h=12)\nplot(forecast_usuarios_registrados)\n\n\n\n\n\n# Media por meses de usuarios que se estima que se registrarán\nforecast_usuarios_registrados$mean\n\n          Jan      Feb      Mar      Apr      May      Jun      Jul      Aug\n2024 49.64213 45.70380 42.23315 38.15777 49.72670 47.06028 49.98531 50.57037\n          Sep      Oct      Nov      Dec\n2024 50.85841 48.87311 45.58468 50.27945\n\n\n\n# Residuos\nforecast_usuarios_registrados$residuals\n\n            Jan        Feb        Mar        Apr        May        Jun\n2023 -3.3760871 -2.4692735  1.3524180 -1.3727414  0.5396656  2.2778460\n            Jul        Aug        Sep        Oct        Nov        Dec\n2023 -0.7143588 -0.1864591 -1.1825920  2.5822336 -0.5665106 -0.0406656\n\n\n\ntsdisplay(residuals(model), main = \"Seasonal Model Residuals\")"
  },
  {
    "objectID": "series_temporales.html#actividad-mensual",
    "href": "series_temporales.html#actividad-mensual",
    "title": "Series Temporales",
    "section": "",
    "text": "También puede ser interesante estudiar cómo han ido interactuando estos usuarios durante los meses. Para ello, podemos ver que si ha habido mucho aumento en los números de seguidores, la actividad ha sido mayor.\n\nts2 &lt;-  ts(max_usuarios_por_meses[2], frequency=12, start=c(2023, 1))\nts2\n\n         Jan     Feb     Mar     Apr     May     Jun     Jul     Aug     Sep\n2023      29     739 5381856     804  232530 3959113  160658   21936   26709\n         Oct     Nov     Dec\n2023  627543 1350470 4166074\n\n\n\nplot.ts(ts2)\n\n\n\n\n\n\nYa hemos visto que el modelo ARIMA nos proporciona mejores resultados, por lo que será el que utilicemos para esta serie.\n\n# Creo el modelo\nmodel2 &lt;- arima(ts2, order = c(0, 0, 20))\nsummary(model2)\n\n\nCall:\narima(x = ts2, order = c(0, 0, 20))\n\nCoefficients:\n          ma1      ma2     ma3      ma4     ma5      ma6      ma7     ma8\n      -0.8568  -0.5056  0.6206  -0.8640  0.5618  -0.0159  -0.2195  1.0064\ns.e.   1.4554   1.9685  1.6826   1.2115  1.5767   1.5556   1.6877  1.9266\n         ma9     ma10     ma11    ma12     ma13    ma14    ma15     ma16\n      0.3442  -0.9977  -0.6680  0.7599  -0.6122  0.2437  0.4635  -0.5355\ns.e.  1.6661   1.3751   1.8677  1.2994   1.4443  1.9772  1.9571   1.5579\n        ma17     ma18     ma19    ma20  intercept\n      1.0273  -0.1439  -0.8968  0.2904  1203218.6\ns.e.  1.5912   1.8637   1.5525  1.2430    55986.4\n\nsigma^2 estimated as 2.896e+11:  log likelihood = -184.25,  aic = 412.5\n\nTraining set error measures:\n                   ME     RMSE      MAE       MPE     MAPE      MASE\nTraining set 108963.6 538181.7 451221.6 -116739.2 120273.6 0.2176707\n                      ACF1\nTraining set -0.0001858907\n\n\n\n# Hago las predicciones para los próximos 12 meses\nforecast_actividad &lt;- forecast::forecast(model2, level=c(95), h=12)\nplot(forecast_actividad)\n\n\n\n\nSegún estas predicciones, la actividad no será tan elevada durante el año 2024, aunque sufrirá menos desviaciones que en el año anterior."
  },
  {
    "objectID": "series_temporales.html#conclusiones",
    "href": "series_temporales.html#conclusiones",
    "title": "Series Temporales",
    "section": "",
    "text": "Como consideraciones finales, es importante tener en cuenta que series temporales es más adecuado para conjuntos de datos con otras características. Sin embargo, esta exploración nos ha permitido comprobar su enorme utilidad y la amplitud de información que se puede extraer con ellas."
  },
  {
    "objectID": "regresion.html",
    "href": "regresion.html",
    "title": "Regresión",
    "section": "",
    "text": "La siguiente técnica que vamos a probar sobre nuestro conjunto de datos es la de regresión. Consiste en estudiar la relación entre una variable dependiente y una o varias variables explicativas, de modo que después se puedan hacer predicciones en base a estos resultados.\n\nlibrary(dplyr)\n\n\ndata_reg &lt;- read.csv(\"train.csv\")\nattach(data_reg)\n\n\n\nPara empezar, vamos a intentar buscar relaciones entre variables, para ver qué atributos podemos añadir al modelo. Para ello, vamos a quitar en principio las variables binarias para simplificar las vistas.\n\ndata_reg2 &lt;- data_reg\n\ndata_reg2$name..username &lt;- NULL\ndata_reg2$profile.pic &lt;- NULL\ndata_reg2$external.URL &lt;- NULL\ndata_reg2$private &lt;- NULL\n\n\n# matriz de diagramas de dispersión\npairs(data_reg2)\n\n\n\n\nEn este diagrama podemos ver ciertas relaciones. Por ejemplo, se observa cierta linealidad entre nums.length.username y nums.length.fullname. Sin embargo, no se aprecian relaciones completamente concluyentes para ningún atributo. Esto es posible que se deba a que haya muchos outliers o que simplemente no tenga relación entre si, lo cual comprobaremos una vez hayamos construido los modelos.\n\n# matriz de correlación\ncor(data_reg2)\n\n                     nums.length.username fullname.words nums.length.fullname\nnums.length.username           1.00000000    -0.22547213           0.40856654\nfullname.words                -0.22547213     1.00000000          -0.09434799\nnums.length.fullname           0.40856654    -0.09434799           1.00000000\ndescription.length            -0.32117027     0.27252216          -0.11752105\nX.posts                       -0.15744211     0.07335018          -0.05771550\nX.followers                   -0.06278509     0.03322460          -0.02703471\nX.follows                     -0.17241327     0.09485496          -0.06797109\nfake                           0.58768653    -0.29879258           0.24678210\n                     description.length     X.posts  X.followers   X.follows\nnums.length.username       -0.321170271 -0.15744211 -0.062785090 -0.17241327\nfullname.words              0.272522165  0.07335018  0.033224604  0.09485496\nnums.length.fullname       -0.117521050 -0.05771550 -0.027034712 -0.06797109\ndescription.length          1.000000000  0.14482370  0.005929455  0.22656142\nX.posts                     0.144823702  1.00000000  0.321385480  0.09822504\nX.followers                 0.005929455  0.32138548  1.000000000 -0.01106599\nX.follows                   0.226561422  0.09822504 -0.011065994  1.00000000\nfake                       -0.460824593 -0.24535515 -0.093688783 -0.22483522\n                            fake\nnums.length.username  0.58768653\nfullname.words       -0.29879258\nnums.length.fullname  0.24678210\ndescription.length   -0.46082459\nX.posts              -0.24535515\nX.followers          -0.09368878\nX.follows            -0.22483522\nfake                  1.00000000\n\n\nAquí vemos la matriz de correlación, que indica cómo de relacionado está cada atributo con todos los demás. Los resultados tampoco son demasiado buenos, pues, aunque hay atributos que muestran cierta relación, no son de manera demasiado significativa en general.\n\n\n\nPara empezar, vamos a crear un modelo para poder predecir la relación entre el número de seguidores y seguidos.\n\n# Generamos el modelo\nmodel &lt;- lm( formula = X.followers ~ X.follows ,  data = data_reg)\nsummary(model)\n\n\nCall:\nlm(formula = X.followers ~ X.follows, data = data_reg)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n  -90885   -90167   -87723   -82523 15248322 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)  \n(Intercept) 90884.99   43393.91   2.094   0.0367 *\nX.follows     -10.97      41.38  -0.265   0.7910  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 910900 on 574 degrees of freedom\nMultiple R-squared:  0.0001225, Adjusted R-squared:  -0.001619 \nF-statistic: 0.0703 on 1 and 574 DF,  p-value: 0.791\n\n\nLo primero que llama la atención es un p-value excesivamente alto, además de que se nos indica que no hay relación entre el número de seguidores y seguidos.\n\n# Lo visualizamos\nplot(X.follows, X.followers)\nabline(model)\n\n\n\n\nComo podemos ver, los puntos con una gran cantidad de seguidores distorsionan los resultados. Vamos a eliminarlos, pues.\n\ndata2 &lt;- data_reg %&gt;%\n  filter(X.followers&lt;4000)\n\nmodel2 &lt;- lm( formula = X.followers ~ X.follows ,  data = data2)\nsummary(model2)\n\n\nCall:\nlm(formula = X.followers ~ X.follows, data = data2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1359.6  -233.1  -191.8     4.2  3473.6 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 233.43628   28.07136   8.316 7.81e-16 ***\nX.follows     0.33455    0.03022  11.071  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 560.5 on 527 degrees of freedom\nMultiple R-squared:  0.1887,    Adjusted R-squared:  0.1871 \nF-statistic: 122.6 on 1 and 527 DF,  p-value: &lt; 2.2e-16\n\n\n\n# Lo visualizamos\nplot(data2$X.follows, data2$X.followers)\nabline(model2)\n\n\n\n\nEstos resultados parecen más fiables. Para asegurarnos de ellos, vamos a estudiar algunos valores del modelo.\n\nplot(model2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nPara la primera y la tercera gráfica, donde vemos Residuals vs. Fitted y Scale-Location, respectivamente, vemos que se distribuyen los puntos de forma algo aleatoria, lo cual es un signo positivo de que nuestro modelo hace bien su trabajo.\nLa segunda, Normal Q-Q, parece desviarse de lo esperado para los últimos valores.\nPor último, en Residuals vs. Leverage, se nos informa de los puntos que tienen mayor influencia en el modelo. Además, se ve que sigue habiendo puntos que no son muestras fiables para el modelo, como el 89 y el 104.\n\n\n\nEl siguiente modelo que voy a crear, va a ser entre el atributo fake y todos los demás, pues me interesa ver cuáles tienen más influencia en el modelo.\n\nmodel3 &lt;- lm( formula = fake ~ .,  data = data_reg ) \nsummary(model3)\n\n\nCall:\nlm(formula = fake ~ ., data = data_reg)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.73096 -0.23729 -0.06653  0.24048  1.01052 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           7.931e-01  3.798e-02  20.880  &lt; 2e-16 ***\nprofile.pic          -4.380e-01  3.345e-02 -13.094  &lt; 2e-16 ***\nnums.length.username  8.062e-01  7.522e-02  10.718  &lt; 2e-16 ***\nfullname.words       -3.354e-02  1.333e-02  -2.516 0.012142 *  \nnums.length.fullname -2.775e-02  1.212e-01  -0.229 0.818988    \nname..username        2.241e-01  7.641e-02   2.933 0.003498 ** \ndescription.length   -1.510e-03  4.342e-04  -3.478 0.000544 ***\nexternal.URL         -1.542e-01  4.800e-02  -3.213 0.001390 ** \nprivate              -9.459e-03  2.843e-02  -0.333 0.739459    \nX.posts              -9.094e-05  3.570e-05  -2.547 0.011120 *  \nX.followers          -9.960e-09  1.539e-08  -0.647 0.517743    \nX.follows            -1.850e-05  1.499e-05  -1.235 0.217530    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3166 on 564 degrees of freedom\nMultiple R-squared:  0.6074,    Adjusted R-squared:  0.5998 \nF-statistic: 79.33 on 11 and 564 DF,  p-value: &lt; 2.2e-16\n\n\nVemos que las que más información aportan son profile.pic, nums.length.username y description.length, seguidas de name..username y external.URL.\nVamos a crear un segundo modelo solo con estas variables.\n\nmodel4 &lt;- lm( formula = fake ~ profile.pic + nums.length.username + description.length + name..username + external.URL,  data = data_reg) \nsummary(model4)\n\n\nCall:\nlm(formula = fake ~ profile.pic + nums.length.username + description.length + \n    name..username + external.URL, data = data_reg)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.71113 -0.24453 -0.07143  0.24282  0.98317 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           0.7354681  0.0316443  23.242  &lt; 2e-16 ***\nprofile.pic          -0.4596554  0.0328023 -14.013  &lt; 2e-16 ***\nnums.length.username  0.8445023  0.0687052  12.292  &lt; 2e-16 ***\ndescription.length   -0.0017381  0.0004285  -4.056 5.68e-05 ***\nname..username        0.2314540  0.0733411   3.156 0.001685 ** \nexternal.URL         -0.1731966  0.0477099  -3.630 0.000309 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3196 on 570 degrees of freedom\nMultiple R-squared:  0.5956,    Adjusted R-squared:  0.592 \nF-statistic: 167.9 on 5 and 570 DF,  p-value: &lt; 2.2e-16\n\n\nVemos que tiene un p-value bajo, pero el valor de R-square parece no ser demasiado alto. De todos modos, vamos a visualizar más información de este modelo para determinar su utilidad.\n\nplot(model4)\n\n\n\n\n\n\n\n\n\n\n\n\n\nPara la primera y la tercera gráfica, no encontramos buenos resultados, pues lo ideal sería que los residuos se distribuyesen de forma aleatoria y en este caso encontramos una clara linealidad en ellos.\nLa segunda parece comportarse de forma esperada, pues vemos que los errores se distribuyen de forma normal.\nPor último, en Residuals vs. Leverage, se observa que hay algunos con el 415 que podrían ser eliminados, pues se desvía demasiado de los demás puntos.\n\n\n\n\nmodel4_upd &lt;- update(model4, fake ~ . + I(description.length^2) + I(nums.length.username^2))\nsummary(model4_upd)\n\n\nCall:\nlm(formula = fake ~ profile.pic + nums.length.username + description.length + \n    name..username + external.URL + I(description.length^2) + \n    I(nums.length.username^2), data = data_reg)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.66881 -0.20550 -0.05292  0.22207  0.93695 \n\nCoefficients:\n                            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                7.141e-01  3.208e-02  22.260  &lt; 2e-16 ***\nprofile.pic               -3.995e-01  3.226e-02 -12.383  &lt; 2e-16 ***\nnums.length.username       1.394e+00  1.600e-01   8.717  &lt; 2e-16 ***\ndescription.length        -8.163e-03  1.121e-03  -7.282 1.10e-12 ***\nname..username             2.158e-01  7.014e-02   3.076 0.002196 ** \nexternal.URL              -1.581e-01  4.559e-02  -3.467 0.000565 ***\nI(description.length^2)    5.378e-05  8.612e-06   6.245 8.30e-10 ***\nI(nums.length.username^2) -9.728e-01  2.341e-01  -4.156 3.74e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3048 on 568 degrees of freedom\nMultiple R-squared:  0.6335,    Adjusted R-squared:  0.629 \nF-statistic: 140.3 on 7 and 568 DF,  p-value: &lt; 2.2e-16\n\n\nHemos conseguido subir ligeramente el valor de R-square, lo que significa que este modelo es algo mejor que el original.\n\n\n\nPara finalizar, vamos a tomar el testing set para intentar predecir si una cuenta es falsa o no en función del último modelo que hemos obtenido.\n\ntest &lt;- read.csv(\"test.csv\")\n\n# Predicción\nprobabilidades &lt;- predict(model4_upd, test)\n\n# Las probabilidades las transformo a binarias\npredicciones_binarias &lt;- ifelse(probabilidades &gt; 0.5, 1, 0)\n\n# Comparamos con la predicción el valor real\nresultados &lt;- data.frame(prediccion=predicciones_binarias, real=test$fake)\nhead(resultados, 10)\n\n   prediccion real\n1           1    0\n2           0    0\n3           0    0\n4           0    0\n5           0    0\n6           0    0\n7           0    0\n8           0    0\n9           0    0\n10          0    0\n\n\n\n# Vemos cuántas de las predicciones coinciden con lo esperado\nporcentaje_aciertos &lt;- sum(predicciones_binarias==test$fake)/length(test$fake)*100\nporcentaje_aciertos\n\n[1] 89.16667\n\n\nComo podemos ver, hemos obtenido un modelo que acierta casi el 90% de sus predicciones. De estos resultados concluimos que en este apartado hemos aprendido un método muy sencillo pero útil con el que se puede conseguir, de forma casi instantánea, una respuesta sobre si una cuenta de Instagram es falsa o no."
  },
  {
    "objectID": "regresion.html#buscando-relaciones",
    "href": "regresion.html#buscando-relaciones",
    "title": "Regresión",
    "section": "",
    "text": "Para empezar, vamos a intentar buscar relaciones entre variables, para ver qué atributos podemos añadir al modelo. Para ello, vamos a quitar en principio las variables binarias para simplificar las vistas.\n\ndata_reg2 &lt;- data_reg\n\ndata_reg2$name..username &lt;- NULL\ndata_reg2$profile.pic &lt;- NULL\ndata_reg2$external.URL &lt;- NULL\ndata_reg2$private &lt;- NULL\n\n\n# matriz de diagramas de dispersión\npairs(data_reg2)\n\n\n\n\nEn este diagrama podemos ver ciertas relaciones. Por ejemplo, se observa cierta linealidad entre nums.length.username y nums.length.fullname. Sin embargo, no se aprecian relaciones completamente concluyentes para ningún atributo. Esto es posible que se deba a que haya muchos outliers o que simplemente no tenga relación entre si, lo cual comprobaremos una vez hayamos construido los modelos.\n\n# matriz de correlación\ncor(data_reg2)\n\n                     nums.length.username fullname.words nums.length.fullname\nnums.length.username           1.00000000    -0.22547213           0.40856654\nfullname.words                -0.22547213     1.00000000          -0.09434799\nnums.length.fullname           0.40856654    -0.09434799           1.00000000\ndescription.length            -0.32117027     0.27252216          -0.11752105\nX.posts                       -0.15744211     0.07335018          -0.05771550\nX.followers                   -0.06278509     0.03322460          -0.02703471\nX.follows                     -0.17241327     0.09485496          -0.06797109\nfake                           0.58768653    -0.29879258           0.24678210\n                     description.length     X.posts  X.followers   X.follows\nnums.length.username       -0.321170271 -0.15744211 -0.062785090 -0.17241327\nfullname.words              0.272522165  0.07335018  0.033224604  0.09485496\nnums.length.fullname       -0.117521050 -0.05771550 -0.027034712 -0.06797109\ndescription.length          1.000000000  0.14482370  0.005929455  0.22656142\nX.posts                     0.144823702  1.00000000  0.321385480  0.09822504\nX.followers                 0.005929455  0.32138548  1.000000000 -0.01106599\nX.follows                   0.226561422  0.09822504 -0.011065994  1.00000000\nfake                       -0.460824593 -0.24535515 -0.093688783 -0.22483522\n                            fake\nnums.length.username  0.58768653\nfullname.words       -0.29879258\nnums.length.fullname  0.24678210\ndescription.length   -0.46082459\nX.posts              -0.24535515\nX.followers          -0.09368878\nX.follows            -0.22483522\nfake                  1.00000000\n\n\nAquí vemos la matriz de correlación, que indica cómo de relacionado está cada atributo con todos los demás. Los resultados tampoco son demasiado buenos, pues, aunque hay atributos que muestran cierta relación, no son de manera demasiado significativa en general."
  },
  {
    "objectID": "regresion.html#un-primer-modelo-simple",
    "href": "regresion.html#un-primer-modelo-simple",
    "title": "Regresión",
    "section": "",
    "text": "Para empezar, vamos a crear un modelo para poder predecir la relación entre el número de seguidores y seguidos.\n\n# Generamos el modelo\nmodel &lt;- lm( formula = X.followers ~ X.follows ,  data = data_reg)\nsummary(model)\n\n\nCall:\nlm(formula = X.followers ~ X.follows, data = data_reg)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n  -90885   -90167   -87723   -82523 15248322 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)  \n(Intercept) 90884.99   43393.91   2.094   0.0367 *\nX.follows     -10.97      41.38  -0.265   0.7910  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 910900 on 574 degrees of freedom\nMultiple R-squared:  0.0001225, Adjusted R-squared:  -0.001619 \nF-statistic: 0.0703 on 1 and 574 DF,  p-value: 0.791\n\n\nLo primero que llama la atención es un p-value excesivamente alto, además de que se nos indica que no hay relación entre el número de seguidores y seguidos.\n\n# Lo visualizamos\nplot(X.follows, X.followers)\nabline(model)\n\n\n\n\nComo podemos ver, los puntos con una gran cantidad de seguidores distorsionan los resultados. Vamos a eliminarlos, pues.\n\ndata2 &lt;- data_reg %&gt;%\n  filter(X.followers&lt;4000)\n\nmodel2 &lt;- lm( formula = X.followers ~ X.follows ,  data = data2)\nsummary(model2)\n\n\nCall:\nlm(formula = X.followers ~ X.follows, data = data2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1359.6  -233.1  -191.8     4.2  3473.6 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 233.43628   28.07136   8.316 7.81e-16 ***\nX.follows     0.33455    0.03022  11.071  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 560.5 on 527 degrees of freedom\nMultiple R-squared:  0.1887,    Adjusted R-squared:  0.1871 \nF-statistic: 122.6 on 1 and 527 DF,  p-value: &lt; 2.2e-16\n\n\n\n# Lo visualizamos\nplot(data2$X.follows, data2$X.followers)\nabline(model2)\n\n\n\n\nEstos resultados parecen más fiables. Para asegurarnos de ellos, vamos a estudiar algunos valores del modelo.\n\nplot(model2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nPara la primera y la tercera gráfica, donde vemos Residuals vs. Fitted y Scale-Location, respectivamente, vemos que se distribuyen los puntos de forma algo aleatoria, lo cual es un signo positivo de que nuestro modelo hace bien su trabajo.\nLa segunda, Normal Q-Q, parece desviarse de lo esperado para los últimos valores.\nPor último, en Residuals vs. Leverage, se nos informa de los puntos que tienen mayor influencia en el modelo. Además, se ve que sigue habiendo puntos que no son muestras fiables para el modelo, como el 89 y el 104."
  },
  {
    "objectID": "regresion.html#un-modelo-genérico",
    "href": "regresion.html#un-modelo-genérico",
    "title": "Regresión",
    "section": "",
    "text": "El siguiente modelo que voy a crear, va a ser entre el atributo fake y todos los demás, pues me interesa ver cuáles tienen más influencia en el modelo.\n\nmodel3 &lt;- lm( formula = fake ~ .,  data = data_reg ) \nsummary(model3)\n\n\nCall:\nlm(formula = fake ~ ., data = data_reg)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.73096 -0.23729 -0.06653  0.24048  1.01052 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           7.931e-01  3.798e-02  20.880  &lt; 2e-16 ***\nprofile.pic          -4.380e-01  3.345e-02 -13.094  &lt; 2e-16 ***\nnums.length.username  8.062e-01  7.522e-02  10.718  &lt; 2e-16 ***\nfullname.words       -3.354e-02  1.333e-02  -2.516 0.012142 *  \nnums.length.fullname -2.775e-02  1.212e-01  -0.229 0.818988    \nname..username        2.241e-01  7.641e-02   2.933 0.003498 ** \ndescription.length   -1.510e-03  4.342e-04  -3.478 0.000544 ***\nexternal.URL         -1.542e-01  4.800e-02  -3.213 0.001390 ** \nprivate              -9.459e-03  2.843e-02  -0.333 0.739459    \nX.posts              -9.094e-05  3.570e-05  -2.547 0.011120 *  \nX.followers          -9.960e-09  1.539e-08  -0.647 0.517743    \nX.follows            -1.850e-05  1.499e-05  -1.235 0.217530    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3166 on 564 degrees of freedom\nMultiple R-squared:  0.6074,    Adjusted R-squared:  0.5998 \nF-statistic: 79.33 on 11 and 564 DF,  p-value: &lt; 2.2e-16\n\n\nVemos que las que más información aportan son profile.pic, nums.length.username y description.length, seguidas de name..username y external.URL.\nVamos a crear un segundo modelo solo con estas variables.\n\nmodel4 &lt;- lm( formula = fake ~ profile.pic + nums.length.username + description.length + name..username + external.URL,  data = data_reg) \nsummary(model4)\n\n\nCall:\nlm(formula = fake ~ profile.pic + nums.length.username + description.length + \n    name..username + external.URL, data = data_reg)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.71113 -0.24453 -0.07143  0.24282  0.98317 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           0.7354681  0.0316443  23.242  &lt; 2e-16 ***\nprofile.pic          -0.4596554  0.0328023 -14.013  &lt; 2e-16 ***\nnums.length.username  0.8445023  0.0687052  12.292  &lt; 2e-16 ***\ndescription.length   -0.0017381  0.0004285  -4.056 5.68e-05 ***\nname..username        0.2314540  0.0733411   3.156 0.001685 ** \nexternal.URL         -0.1731966  0.0477099  -3.630 0.000309 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3196 on 570 degrees of freedom\nMultiple R-squared:  0.5956,    Adjusted R-squared:  0.592 \nF-statistic: 167.9 on 5 and 570 DF,  p-value: &lt; 2.2e-16\n\n\nVemos que tiene un p-value bajo, pero el valor de R-square parece no ser demasiado alto. De todos modos, vamos a visualizar más información de este modelo para determinar su utilidad.\n\nplot(model4)\n\n\n\n\n\n\n\n\n\n\n\n\n\nPara la primera y la tercera gráfica, no encontramos buenos resultados, pues lo ideal sería que los residuos se distribuyesen de forma aleatoria y en este caso encontramos una clara linealidad en ellos.\nLa segunda parece comportarse de forma esperada, pues vemos que los errores se distribuyen de forma normal.\nPor último, en Residuals vs. Leverage, se observa que hay algunos con el 415 que podrían ser eliminados, pues se desvía demasiado de los demás puntos."
  },
  {
    "objectID": "regresion.html#mejorando-el-modelo",
    "href": "regresion.html#mejorando-el-modelo",
    "title": "Regresión",
    "section": "",
    "text": "model4_upd &lt;- update(model4, fake ~ . + I(description.length^2) + I(nums.length.username^2))\nsummary(model4_upd)\n\n\nCall:\nlm(formula = fake ~ profile.pic + nums.length.username + description.length + \n    name..username + external.URL + I(description.length^2) + \n    I(nums.length.username^2), data = data_reg)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.66881 -0.20550 -0.05292  0.22207  0.93695 \n\nCoefficients:\n                            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                7.141e-01  3.208e-02  22.260  &lt; 2e-16 ***\nprofile.pic               -3.995e-01  3.226e-02 -12.383  &lt; 2e-16 ***\nnums.length.username       1.394e+00  1.600e-01   8.717  &lt; 2e-16 ***\ndescription.length        -8.163e-03  1.121e-03  -7.282 1.10e-12 ***\nname..username             2.158e-01  7.014e-02   3.076 0.002196 ** \nexternal.URL              -1.581e-01  4.559e-02  -3.467 0.000565 ***\nI(description.length^2)    5.378e-05  8.612e-06   6.245 8.30e-10 ***\nI(nums.length.username^2) -9.728e-01  2.341e-01  -4.156 3.74e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3048 on 568 degrees of freedom\nMultiple R-squared:  0.6335,    Adjusted R-squared:  0.629 \nF-statistic: 140.3 on 7 and 568 DF,  p-value: &lt; 2.2e-16\n\n\nHemos conseguido subir ligeramente el valor de R-square, lo que significa que este modelo es algo mejor que el original."
  },
  {
    "objectID": "regresion.html#predicciones",
    "href": "regresion.html#predicciones",
    "title": "Regresión",
    "section": "",
    "text": "Para finalizar, vamos a tomar el testing set para intentar predecir si una cuenta es falsa o no en función del último modelo que hemos obtenido.\n\ntest &lt;- read.csv(\"test.csv\")\n\n# Predicción\nprobabilidades &lt;- predict(model4_upd, test)\n\n# Las probabilidades las transformo a binarias\npredicciones_binarias &lt;- ifelse(probabilidades &gt; 0.5, 1, 0)\n\n# Comparamos con la predicción el valor real\nresultados &lt;- data.frame(prediccion=predicciones_binarias, real=test$fake)\nhead(resultados, 10)\n\n   prediccion real\n1           1    0\n2           0    0\n3           0    0\n4           0    0\n5           0    0\n6           0    0\n7           0    0\n8           0    0\n9           0    0\n10          0    0\n\n\n\n# Vemos cuántas de las predicciones coinciden con lo esperado\nporcentaje_aciertos &lt;- sum(predicciones_binarias==test$fake)/length(test$fake)*100\nporcentaje_aciertos\n\n[1] 89.16667\n\n\nComo podemos ver, hemos obtenido un modelo que acierta casi el 90% de sus predicciones. De estos resultados concluimos que en este apartado hemos aprendido un método muy sencillo pero útil con el que se puede conseguir, de forma casi instantánea, una respuesta sobre si una cuenta de Instagram es falsa o no."
  }
]